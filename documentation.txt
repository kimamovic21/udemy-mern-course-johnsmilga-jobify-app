Mern Jobify App

Section 01: Introduction

01. Course Resources
02. Course Requirements
03. Free Resources
04. Video Blur Fixed
05. Course Review


Section 02: VS Code

06. VS Code
-instaliranje VS Code ekstenzija

07. VITE - Info
-otvorimo web stranicu https://vitejs.dev/guide/

08. VITE - Install
-u terminalu provjerimo trenutnu verziju npm-a sa komandom npm --version (8.12.1)
-u terminalu provjerimo trenutnu verziju node-a sa komandom node --version (21.6.2)
-u terminalu instaliramo VITE React.js aplikaciju sa komandom npm create vite@latest client
-odaberemo opciju biblioteku React i opciju Vanilla Javascript

09. VITE - Folder Structure
-u terminalu navigiramo u folder client sa komandom cd client 
-u folderu client instaliramo pakete sa komandom npm i

10. Remove Boilerplate
-obrisan App.css fajl
-manje izmjene u fajlovima index.css i documentation.txt

11. Obtain Assets
-u folder assets dodani folderi css, images, wrappers i README.md fajl

12. Global CSS
-u index.css fajl dodan CSS stil potreban za projekt
-u folderu assets izbrisemo README.md fajl

13. Title and Favicon
-u folder public dodajemo sliku favicon.ico
-u index.html fajl dodajemo sliku favicon.ico

14. Install All Libraries (Optional)
-u terminalu instaliramo potrebne pakete za projekt

15. React Router - Info

16. React Router - Initial Setup
-u komponentu App.jsx dodajemo logiku za React Router Dom
-u komponentu App.jsx importujemo funkciju createBrowserRouter i komponentu RouterProvider
-kreiramo varijablu const router
-komponenti RouterProvider dodajemo prop router 
-u prop router proslijedujemo vrijednost varijable router

17. Create Pages
-u folderu src kreiramo folder pages
-u folderu pages kreiramo index.js fajl
-u folderu pages kreiramo jsx komponente
-u komponentu App.jsx importujemo kreirane komponente

18. Setup index.js
-u index.js fajlu eksportujemo kreirane komponente
-u komponentu App.jsx importujemo komponente iz index.js fajla

19. Link Component
-u komponente Register.jsx i Login.jsx importujemo komponentu Link

20. Nested Routes
-u komponenti App.jsx, dodajemo niz children
-u niz children dodajemo vise objekata sa rutama
-dodajemo rutu index
-u komponentu HomeLayout.jsx importujemo komponentu Outlet

21. Error Page
-u komponentu App.jsx importujemo komponentu Error.jsx
-dodajemo opciju errorElement i vrijednost komponentu Error
-u komponentu Error.jsx importujemo komponentu Link i funkciju useRouteError
-vrijednost funkcije useRouteError() pohranjujemo u varijablu const error


Section 04: Landing Page

22. Styled Components - Intro
-u komponentu Landing.jsx importujemo instancu styled iz paketa Styled Components
-kreiramo varijablu const StyledBtn

23. Wrapper
-u komponenti Landing.jsx kreiramo stiliziranu varijablu komponentu const Wrapper
-u funkciji Landing(), u jsx-u dodajemo komponentu Wrapper sa otvorenim i zatvorenim tagom

24. Landing Page
-u komponentu Landing dodajemo slike iz foldera images
-kreiramo stilizirano varijablu komponentu const StyledWrapper
-u funkciju Landing() dodajemo komponentu StyledWrapper sa otvorenim i zatvorenim tagom

25. Landing Page - CSS (Optional)
-u komponenti LandingPage.jsx komponenti Wrapper klasama dodajemo CSS stil

26. Logo Component
-u folderu src kreiramo folder components
-u folderu components kreiramo komponentu Logo.jsx
-u folderu component kreiramo index.js fajl
-u index.js fajlu eksportujemo komponentu Logo
-u komponentu Landing.jsx dodajemo komponentu Logo.
-u jsx-u, u nav element dodajemo komponentu Logo 

27. Logo and Images
-otvorimo web stranicu https://undraw.co/ za pretrazivanje potrebnog Logo-a


Section 05: Error Page

28. Error Page - JSX
-u komponentu Error.jsx importujemo sliku i komponentu Wrapper
-dodajemo uslov if (error.status === 404)

29. Error Page - CSS (Optional)
-u ErrorPage.js fajlu dodajemo varijabli komponenti Wrapper CSS stil


Section 06: Register Page

30. Register Page - Setup
-u komponentu Register importujemo stiliziranu komponentu Wrapper iz RegisterAndLoginPage.js fajla
-importujemo sliku Logo
-u jsx-u kreiramo HTML elemente za registraciju
-input elementu dodajemo atribute type, id, name, className, defaultValue, required

31. FormRow Component
-u eslint.config.js fajlu dodajemo opciju 'react/prop-types': 'off'
-u folderu components kreiramo komponentu FormRow.jsx
-u komponenti FormRow.jsx, funkciji FormRow() dodajemo parametre destruktuirane props type, name, labelText, defaultValue = ''
-u jsx-u, atributima elementa input proslijedujemo vrijednost za prop
-u komponentu Register.jsx importujemo komponentu FormRow.jsx
-u jsx-u kreiramo vise komponenti FormRow za svako input polje
-svakoj komponenti FormRow dodajemo prop sa podacima
-u components/index.js fajlu eksportujemo komponentu FormRow


Section 07: LoginPage

32. LoginPage
-u komponentu Login.jsx importujemo stilizirano komponentu Wrapper iz RegisterAndLoginPage.js fajla
-importujemo komponentu FormRow i sliku Logo
-u jsx-u dodajemo komponente FormRow
-komponentama FormRow dodajemo vrijednosti za prop

33. Login and Register CSS (Optional)
-u RegisterAndLoginPage.js fajlu dodan CSS stil za stiliziranu komponentu Wrapper koja se koristi u komponentama Register.jsx i Login.jsx


Section 08: Dashboard Page

34. Dashboard Setup
-u komponentu App.jsx importujemo nove komponente
-u objekt ruti za rutu dashboard kreiramo novi niz children
-u nizu children kreiramo nove objekte za rute
-u komponentu DashboardLayout.jsx importujemo komponentu Outlet

35. Dashboard Structure
-u folderu components kreiramo tri nove komponente BigSidebar.jsx, SmallSidebar.jsx i Navbar.jsx
-u svaku komponentu importujemo odgovarajucu stiliziranu komponentu Wrapper
-u index.js fajlu eksportujemo kreirane rute
-u komponenetu DashboardLayout.jsx importujemo kreirane komponente

36. Dashboard CSS (optional)
-u folderu wrappers, u Dashboard.js fajlu klasama dodajemo CSS stil

37. Dashboard Context
-u komponenti DashboardLayout.jsx kreiramo varijablu const user
-kreiramo state varijablu showSidebar i set funkciju setShowSidebar
-kreiramo state varijablu isDarkTheme i set funkciju setIsDarkTheme
-kreiramo funkcije toogleDarkTheme(), toggleSidebar(), logoutUser()
-importujemo funkciju createContext iz paketa React
-u jsx dodajemo kreiramo komponentu DashboardContext.Provider sa otvorenim i zatvorenim tagom
-komponenti DashboardContext.Provider dodajemo prop value
-u prop value proslijedujemo objekt sa kreiranim varijablama koje se trebaju proslijediti
-importujemo funkciju useContext iz paketa React
-kreiramo i eksportujemo varijablu const useDashboardContext
-u komponentu SmallSidebar.jsx importujemo funkciju useDashboardContext()
-kreiramo varijablu const data

38. React Icons
-otvorimo web stranicu https://react-icons.github.io/react-icons/ da odaberemo potrebnu ikonicu
-u komponentu Navbar.jsx importujemo ikonicu FaHome

39. Navbar Structure
-u komponentu Navbar.jsx importujemo ikonicu FaAlignLeft 
-importujemo i kreiramo funkciju useDashboardContext
-iz vrijednosti funkcije useDashboardContext() destruktuiramo funkciju toggleSidebar

40. Navbar CSS (Optional)
-u wrappers/Navbar.js fajlu dodajemo klasama CSS stil 

41. Links Data
-u folderu src kreiramo folder utils i links.jsx fajl
-u links.jsx fajl importujemo React ikonice
-kreiramo varijablu niz const links
-u nizu links kreiramo objekte koji sadrze informacije o putanji rute, ime i ikonicu koju sadrze

42. Sidebar Structure
-u komponentu SmallSidebar.jsx importujemo i kreiramo funkcije  useDashboardContext()
-importujemo sliku Logo
-importujemo niz links
-u jsx-u nizu links dodajemo metodu map()
-importujemo komponentu NavLink iz paketa React Router Dom
-u metodi map anonimnoj funkciji dodajemo parametar link
-u metodi map() dodajemo komponentu NavLink koji sadrze prop to, key i className
-iz varijable link destruktuiramo varijable const { text, path, icon }

43. Sidebar Functionality
-u komponenti SmallSidebar.jsx destruktuiramo varijable showSidebar, toggleSidebar iz funkcije useDashboardContext()
-div elementu dodajemo dinamicku klasu za prikazivanje elementa Sidebar na malom ekranu
-u jsx-u komponenti NavLink dodajemo prop onClick
-u prop onClick proslijedujemo funkciju toggleSidebar
-komponenti NavLink dodajemo prop end

44. Sidebar CSS (optional)
-u wrappers/SmallSidebar.js fajlu dodan CSS stil za Sidebar

45. NavLinks Component
-u folderu components kreiramo komponentu NavLinks.jsx
-u komponentu NavLinks.jsx importujemo i kreiramo funkciju useDashboardContext()
-iz funkcije useDashboardContext() destruktuiramo varijable const { user, toggleSidebar }
-importujemo komponentu NavLink iz paketa React Router Dom
-u komponentu SmallSidebar.jsx importujemo komponentu NavLinks.jsx

46. Big Sidebar
-u komponentu BigSidebar.jsx importujemo i kreiramo funkciju useDashboardContext()
-iz funkcije useDashboardContext() destruktuiramo varijablu const showSidebar 
-u jsx-u div elementu dodajemo dinamicku klasu showSidebar
-importujemo komponentu NavLinks.jsx
-u jsx-u komponenti NavLinks dodajemo prop isBigSidebar
-u komponenti NavLinks.jsx, funkciji NavLinks() dodajemo parametar destruktuirani prop isBigSidebar
-u prop onClick dodajemo ternarni uslov isBigSidebar ? null : toggleSidebar

47. Big Sidebar CSS (Optional)
-u wrappers/BigSidebar.js fajlu dodajemo CSS stil za klase

48. Logout Container
-u folderu components kreiramo komponentu LogoutContainer.jsx
-u komponentu LogoutContainer.jsx importujemo i kreiramo funkciju useState()
-importujemo i kreiramo funkciju useDashboardContext()
-kreiramo state varijablu const showLogout i set funkciju setShowLogout
-iz funkcije useDashboardContext() destruktuiramo varijablu user i funkciju logoutUser
-importujemo stiliziranu komponentu Wrapper iz wrappers/LogoutContainer.js fajla
-u jsx-u button elementu dodajemo dogadaj onClick
-u jsx-u dodajemo uslov ternarni operator user.avatar
-div elementu dodajemo klasu ternarni operator showLogout
-u komponentu Navbar.jsx importujemo komponentu LogoutContainer.jsx
-button elementu dodajemo dogadaj onClick
-u dogadaj onClick proslijedujemo funkciju logoutUser

49. Logout Container CSS (optional)
-u wrappers/LogoutContainer.js fajlu dodajemo CSS stil za klase

50. Theme Toggle
-u folderu components kreiramo komponentu ToggleTheme.jsx 
-importujemo i kreiramo funkciju useDashboardContext()
-importujemo React ikonice
-importujemo stiliziranu komponentu Wrapper iz wrappers/ThemeToggle.js fajla
-destruktuiramo varijable const { isDarkTheme, toggleDarkTheme }
-u jsx-u komponenti Wrapper dodajemo prop onClick
-u prop onClick proslijedujemo funkciju toggleDarkTheme
-u jsx-u dodajemo ternani uslov za isDarkTheme za pojavljivanje React ikonica
-u komponentu Navbar.jsx importujemo komponentu ThemeToggle.jsx

51. Theme Toggle CSS (optional)
-u wrappers/ThemeToggle.js fajlu dodajemo CSS stil za klase

52. Dark Theme Logic
-u komponenti DashboardLayout.jsx dodajemo logiku u funkciju toggleDarkTheme()
-u funkciji toggleDarkTheme() kreiramo varijablu const newDarkTheme = !isDarkTheme
-dodajemo set funkciju setIsDarkTheme(newDarkTheme)
-dodajemo metodu document.body.classList.toggle()
-dodajemo metodu localStorage.setItem()
-kreiramo funkciju checkDefaultTheme()
-u funkciji checkDefaultTheme() kreiramo varijablu cpmst isDarkTheme
-dodajemo metodu document.body.classList.toggle()
-dodajemo return isDarkTheme
-u funkciju useState() za promjenu teme proslijedujemo funkciju checkDefaultTheme()
-u komponenti App.jsx kreiramo funkciju checkDefaultTheme()
-kreiramo varijablu const isDarkThemeEnabled
-u objekt ruti za komponentu DashboardLayout dodajemo prop isDarkThemeEnabled
-u prop isDarkThemeEnabled proslijedujemo vrijednost varijable isDarkThemeEnabled
-u komponenti DashboardLayout.jsx, funkciji DashboardLayout() dodajemo parametar destruktuirani prop isDarkThemeEnabled
-u funkciju useState() za promjenu teme proslijedujemo varijablu isDarkThemeEnabled

53. Dark Theme Logic - Bug Fix
-u komponenti App.jsx eksportujemo funkciju checkDefaultTheme()
-u komponentu DashboardLayout.jsx importujemo funkciju checkDefaultTheme()
-u funkciju useState() proslijedujemo funkciju checkDefaultTheme()

54. Dark Theme CSS (optional)
-u index.css dodajemo CSS klase za promjenu boje teme 


Section 09: Server

55. Folder Structure
-u root folderu, u terminalu ukucamo komandu npm init -y da generisemo package.json fajl
-u terminal ukucamo komandu node server
-u terminalu treba da se prikaze poruka console.log() ako je sve uredu

56. ES6 Modules
-u package.json fajl dodajemo opciju "type": "module"
-kreiramo dva fajla test-named.js i test-default.js
-u tim fajlovima kreiramo i eksportujemo varijable
-u server.js fajl importujemo kreirane varijable
-u terminal ukucamo komandu node server da vidimo vrijednost varijabli 

57. Install Server Packages
-u terminalu instaliramo potrebne pakate za server dio projekta
-u package.json fajlu u objektu scripts dodajemo komandu "setup-project": "npm i && cd client && npm i"
-u terminal ukucamo komandu npm run setup-project sa kojom u istom vrijeme instaliramo pakete za client i server dio

58. Express and Nodemon
-u server.js fajl importujemo instancu express
-kreiramo varijablu const app
-kreiramo metodu app.get()
-kreiramo metodu app.listen()
-u package.json fajl dodajemo komandu "dev": "nodemon server.js"
-u terminal ukucamo komandu npm run dev da pokrenemo Node.js - Express server

59. Thunder Client 
-otvorimo web stranicu https://www.thunderclient.com/
-mozemo koristiti i Postman
-u Postman-u kreiramo novu kolekciju Udemy - MERN Course Jogn Smilga Jobify App
-kreiramo novi zahtjev Home Route 
-testiramo rutu http://localhost:5100 sa metodom GET

60. JSON Middleware
-u server.js fajlu kreiramo metodu app.use(express.json())
-kreiramo metodu app.post()
-u Postman-u kreiramo novi zahtjev Home Route Post i testiramo rutu http://localhost:5100 sa metodom POST

61. Morgan and Dotenv
-u server.js fajl importujemo instancu morgan
-kreiramo metodu app.use(morgan('dev'))
-kreiramo fajlove .env i env.example
-u fajlovima .env i env.example kreiramo varijable NODE_ENV i PORT
-u server.js fajlu importujemo dotenv instancu
-instanci dotenv dodajemo metodu config()
-dodajemo uslov if (process.env.NODE_ENV === 'development')
-kreiramo varijablu const port

62. New Node Features (optional)
-u server.js fajlu kreiramo metodu fetch()
-kreiramo funkciju getData()
-kreiramo metode try - catch
-u package.json fajlu u objektu scripts dodajemo komandu "watch": "node --watch server.js"
-u terminal ukucamo komandu npm run watch da pokrenemo server

63. Get All Jobs
-importujemo funkciju nanoid iz paketa nanoid
-kreiramo varijablu niz let jobs
-kreiramo metodu app.get('/api/v1/jobs')
-u Postman testiramo rutu http://localhost:5100/api/v1/jobs sa metodom GET
-u Postman-u kreiramo folder Job Routes gdje cemo pohranjivati sve rute vezane za poslove
-u Postman-u u postavkama za Environments kreiramo globalnu varijablu URL

64. Create Job
-varijabla URL sadrzi link http://localhost:5100/api/v1
-u server.js fajlu kreiramo metodu app.post('/api/v1/jobs') za kreiranje poslova
-u funkciji (req, res) destruktuiramo varijable const { company, position }
-dodajemo uslov if (!company || !position)
-u uslov if dodajemo metodu res.status(400)
-kreiramo varijablu const id
-kreiramo varijablu objekt const job
-dodajemo metodu jobs.push(job)
-dodajemo metodu res.status(200)
-u Postman-u testiramo rutu {{URL}}/jobs sa metodom POST

65. Get Single Job
-u server.js fajlu kreiramo metodu app.get('/api/v1/jobs/:id')
-u funkciji (req, res) destruktuiramo varijablu const { id } 
-kreiramo varijablu const job
-dodajemo uslov if (!job)
-u uslov if dodajemo return res.status(404)
-dodajemo metodu res.status(200)
-u Postman-u testiramo rutu {{URL}}/jobs/:id sa metodom GET

66. Edit Job
-u server.js fajlu kreiramo metodu app.patch('/api/v1/jobs/:id')
-u funkciji (req, res) destruktuiramo varijable const { company, position } 
-dodajemo uslov if (!company || !position)
-u uslov if dodajemo metodu res.status(400)
-destruktuiramo varijablu const { id }
-kreiramo varijablu const job
-dodajemo uslov if (!job)
-u uslov if (!job) dodajemo metodu res.status(404)
-nove izmjenjene podatke pohranjujemo u job.company = company i job.position = position
-dodajemo metodu res.status(200)
-u Postman-u testiramo rutu {{URL}}/jobs/:id sa metodom PATCH

67. Delete Job
-u server.js fajlu kreiramo metodu app.delete('/api/v1/jobs/:id')
-u funkciji (req, res) destruktuiramo varijablu const { id } 
-kreiramo varijablu const job 
-dodajemo uslov if (!job)
-u uslov if (job) dodajemo metodu res.status(404)
-kreiramo varijablu const newJobs
-redeklarisemo varijablu jobs sa novom vrijednosti iz varijable newJobs
-dodajemo metodu res.status(200)
-u Postman-u testiramo rutu {{URL}}/jobs/:id sa metodom DELETE

68. Not Found and Error Route
-u server.js fajlu kreiramo metod app.use('*')
-dodajemo metodu res.status(404)
-kreiramo metodu app.use((err, req, res, next) => {...})
-dodajemo metodu res.status(500)

69. Not Found vs Error Route
-u server.js fajlu, u funkciji za dohvacanje posla, u uslov if dodajemo objekt throw new Error()

70. Controller and Router
-kreiramo folder controllers
-u folderu controllers kreiramo jobController.js fajl
-u jobController.js fajl premjestamo CRUD funkcije za poslove iz server.js fajla
-anonimnim funkcijama (req, res) dodjeljujemo imena 
-eksportujemo kreirane funkcije
-kreiramo folder routes
-u folderu routes kreiramo jobRouter.js fajl
-u jobRouter.js fajl importujemo CRUD funkcije za poslove iz jobController.js fajla
-importujemo funkciju Router iz Express paketa
-vrijednost funkcije Router() pohranjujemo u varijablu const router
-kreiramo metode router.route()
-varijablu router eksportujemo kao default
-u server.js fajlu importujemo varijablu jobRouter iz jobRouter.js fajla
-kreiramo metodu app.use('/api/v1/jobs', jobRouter)

71. MongoDB

72. Atlas Account
-otvorimo web stranicu https://www.mongodb.com/products/platform/atlas-database
-kreiramo novi racun ako nemamo postojeci
-kreiramo bazu podatataka na MongoDB Atlas-u
-kreiramo novi Connection string
-u fajlovima .env i .env.example kreiramo varijablu MONGO_URL

73. Mongoose
-otvorimo web stranicu https://mongoosejs.com/

74. Connect DB
-u server.js fajl importujemo instancu mongoose
-kreiramo blokove koda try - catch
-u blok koda try dodajemo metodu mongoose.connect()
-dodajemo metodu app.listen()
-u blok koda catch dodajemo console.error(error)
-dodajemo metodu process.exit(1)

75. Job Model
-kreiramo folder models
-u folderu models kreiramo JobModel.js fajl
-u JobModel.js fajl importujemo instancu mongoose
-kreiramo varijablu const JobSchema
-u funkciju Schema() dodajemo konfiguracione objekte
-eksportujemo mongoose.model() kao default

76. Create Job Controller
-u jobController.js fajl importujemo model Job 
-u asinhronu funkciju createJob() dodajemo metodu await Job.create()
-u Postman-u testiramo rutu za kreiranje posla

77. Async Errors
-u jobController.js fajlu, u metodi Job.create() dodajemo string da testiramo gresku prilikom slanja podataka u bazu
-importujemo paket Express Async Errors

78. Get All Jobs and Get Single Job
-u jobController.js fajlu, u funkciji getAllJobs() dodajemo metodu Job.find()
-u funkciju za kreiranje poslova dodajemo Job.create(req.body)
-u Postman-u kreiramo vise poslova 
-u funkciju getJob() dodajemo metodu await Job.findById(id)
-u Postman-u testiramo rutu za pretrazivanje poslova i posla po id-u

79. Delete and Update Job
-u funkciju deleteJob() dodajemo metoda await Job.findByIdAndDelete(id)
-u funkciju updateJob() dodajemo metodu await Job.findByIdAndUpdate()
-u Postman-u testiramo rute za izmjenu i brisanje posla

80. Status Codes
-u jobController.js fajl importujemo objekt StatusCodes iz paketa HTTP Status Codes

81. Custom Error
-kreiramo folder errors
-u folderu error kreiramo customErrors.js fajl
-u customErrors.js fajl importujemo objekt StatusCodes
-eksportujemo klasu classNotFoundError
-u jobController.js fajl, importujemo klasu NotFoundError
-u funkciju getJob() dodajemo NotFoundError()
-kreiramo folder middleware
-u folderu middleware kreiramo errorHandlerMiddleware.js fajl
-u errorHandlerMiddleware.js fajlu kreiramo funkciju errorHandlerMiddleware() sa parametrima err, req, res i next
-u funkciju errorHandlerMiddleware() dodajemo metodu res.status(500)
-kreiramo varijable const statusCode i const msg
-dodajemo metodu res.status(statusCode)
-eksportujemo funkciju kao default
-u server.js fajl importujemo funkciju errorHandlerMiddleware
-kreiramo metodu app.use(errorHandlerMiddleware)
-u jobController.js fajlu, u funkcije updateJob() i deleteJob() dodajemo funkciju NotFoundError()

82. More Custom Errors
-u customErrors.js fajlu kreiramo klase BadRequestError, UnauthenticatedError i UnauthorizedError

83. Validation Layer - Intro

84. Express Validator - Setup
-u server.js fajlu dodajemo metodu app.post() za rutu '/api/v1/test'
-importujemo funkcije body i validationResult iz paketa Express Validator
-u metodu app.post() dodajemo funkcije body i validationResult
-u metodi app.post() prvi argument je ruta
-drugi argument je niz za validaciju
-treci argument je anonimna funkcija (req, res) za validaciju
-cetrvti argument je anonimna funkcija (req, res)
-u anonimnoj funkciji (req, res) kreiramo varijablu const errors
-dodajemo uslov if (!errors.isEmpty())
-u uslovu if kreiramo varijablu const errorMessages 

85. Validation Middleware
-u folderu middleware kreiramo validationMiddleware.js fajl
-u validationMiddleware.js fajlu kreiramo funkciju withValidationErrors() sa parametrom validateValues
-importujemo funkcije body i validationResult iz paketa Express Validator
-importujemo funkciju BadRequestError iz customErrors.js fajla
-u return izjavu dodajemo niz
-u niz dodajemo parametar validateValues i anonimnu funkciju sa parametrima (req, res, next)
-kreiramo funkciju withValidationErrors() sa nizom kao argumentom
-vrijednost funkcije withValidationErrors() pohranjujemo u varijablu const validateTest
-eksportujemo varijablu validateTest
-u server.js fajl importujemo funkciju validateTest
-u metodu app.post() dodajemo funkciju validateTest

86. Constants
-kreiramo foler utils i constants.js fajl
-u constants.js fajlu kreiramo i eksportujemo varijable JOB_STATUS, JOB_TYPE, JOB_SORT_BY
-u model JobModel.js fajl importujemo kreirane varijable konstante
-u opcije enum dodajemo metode Object.values(JOB_STATUS) i Object.values(JOB_TYPE) 

87. Validate Job Input
-u validationMiddleware.js fajlu kreiramo i eksportujemo varijablu validateJobInput
-importujemo varijable konstante JOB_STATUS, JOB_TYPE
-u funkciju withValidationErrors() dodajemo niz za validaciju polja
-u jobRouter.js fajl importujemo funkciju validateJobInput
-u rute za poslove dodajemo funkciju validateJobInput
-testiramo rute u Postman-u za kreiranje poslova i izmjenu informacija o poslu

88. Validate ID Params
-u validationMiddleware.js fajl importujemo funkciju param iz paketa Express Validator
-kreiramo i eksportujemo varijablu const validateIdParam
-u funkciji withValidationErrors() kreiramo niz za validaciju parametra
-u jobRouter.js fajl importujemo funkciju validateIdParam
-u Postman-u testiramo rutu za izmjenu podataka jednog posla po id-u

89. Validate Job
-u validationMiddleware.js fajlu, u funkciji validateIdParam() kreiramo varijablu const isValidId
-importujemo model Job
-importujemo funkciju NotFoundError iz customErrors.js fajla
-dodajemo uslov if (!isValidId)
-kreiramo varijablu const job
-dodajemo uslov if (!job)
-u uslov if (!errors.isEmpty()) dodajemo jos jedan uslov if (errorMessages[0].startsWith('no job'))
-u jobController.js fajlu brisemo uslove if
-brisemo varijable const { id }

90. User Model
-u folderu models kreiramo UserModel.js fajl
-kreiramo varijablu const UserSchema
-eksportujemo model kao default User
-iz baze MongoDB izbrisemo postojece poslove

91. User Controller and Router
-u folderu controllers kreiramo asinhrone funkcije register() i login()
-u folderu routes kreiramo authRouter.js fajl
-u authRouter.js fajl importujemo funkciju Router
-importujemo funkcije register i login i authController.js fajla
-kreiramo dvije metode router.post() za rute register i login
-varijablu router eksportujemo kao default
-u server.js fajl importujemo varijablu router iz authRouter.js fajla kao authRouter
-kreiramo metodu app.use('/api/v1/auth')
-u Postman-u kreiramo folder Auth Routes
-u folderu Auth Routes kreiramo dva zahtjeva za rute register i login sa metodom POST
-testiramo kreirane rute

92. Create User
-u authController.js fajlu, u funkciji register() kreiramo varijablu const user
-dodajemo metodu res.status(StatusCodes.CREATED)
-u Postman-u testiramo rutu za kreiranje korisnika

93. Validate Register User
-u validationMiddleware.js fajlu kreiramo i eksportujemo varijablu export const validateRegisterInput
-importujemo model User iz UserModel.js fajla
-u funkciju withValidationErrors() dodajemo niz za validaciju
-u funkciju custom() dodajemo asinhronu anonimnu funkciju sa parametrom email
-u anonimnoj funkciji kreiramo varijablu const user
-dodajemo uslov if (user)
-u uslovu if (user) dodajemo funkciju throw new BadRequestError()
-u authRouter.js fajl importujemo funkciju validateRegisterInput
-u metodu app.post() za registraciju dodajemo funkciju validateRegisterInput
-u Postman-u testiramo rutu za kreiranje korisnika da provjerimo validaciju

94. Admin User
-u authController.js fajlu, u funkciji register() dodajemo logiku da prvi kreirani korisnik ima rolu admin¸
-kreiramo varijablu const isFirstAccount
-u Postman-u testiramo rutu za kreiranje korisnika kreirajuci drugog korisnika 

95. Hash Password
-u authController.js fajl importujemo instancu bcrypt iz paketa Bcrypt.js
-kreiramo varijable const salt i const hashedPassword

96. Hash Utils
-u folderu utils kreiramo passwordUtils.js fajl
-u passwordUtils.js fajlu kreiramo i eksportujemo asinhronu funkciju hashPassword() sa parametrom password
-u authController.js fajl importujemo funkciju hashPassword
-u funkciju register() dodajemo funkciju hashPassword()
-u funkciju hashPassword() proslijedujemo argument req.body.password
-u Postman-u testiramo rutu za kreiranje korisnika

97. Validate Login
-u validationMiddleware.js fajlu kreiramo i eksportujemo varijablu const validateLoginInput
-u funkciju withValidationErrors() dodajemo niz za validaciju login polja
-u authRouter.js fajl importujemo funkciju validateLoginInput
-u rutu za login dodajemo funkciju validateLoginInput
-u Postman-u testiramo rutu za prijavu korisnika

98. Login Logic
-u authController.js fajlu, u funkciji login() kreiramo varijablu const user
-dodajemo uslov if(!user)
-u passwordUtils.js fajlu kreiramo i eksportujemo asinhronu funkciju comparePassword() sa parametrima password i hashPassword
-u funkciji comparePassword() kreiramo varijablu const isMatch
-u authController.js fajl importujemo funkciju comparePassword() iz passwordUtils.js fajl
-u authController.js fajlu u funkciji login() kreiramo varijablu const isPasswordCorrect
-dodajemo uslov if (!isPasswordCorrect)
-kreiramo varijablu const isValidUser
-dodajemo uslov if (!isValidUser)
-importujemo funkciju UnauthenticatedError 
-u uslov if(!isValidUser) dodajemo funkciju UnauthenticatedError()
-u Postman-u testiramo rutu za prijavu korisnika

99. JWT (JSON Web Token)
-otvorimo web stranicu https://jwt.io/
-u folderu utils kreiramo tokenUtils.js fajl
-u tokenUtils.js fajl importujemo instancu jwt iz pakete Json Web Token
-kreiramo i eksportujemo funkciju create JWT() sa parametrom payload
-u funkciji createJWT() kreiramo varijablu const token
-u authController.js fajl importujemo funkciju createJWT
-importujemo funkciju createJWT iz tokenUtils.js fajla
-u funkciju login() dodajemo funkciju createJWT()
-funkciji createJWT() dodajemo argument objekt sa informacijama o korisnikovom id-u i roli
-vrijednost funkcije createJWT() pohranjujemo u varijablu const token
-dodajemo metodu res.send({ token })
-u Postman-u testiramo rutu za prijavu korisnika

100. JWT ENV
-u fajlovima .env i .env.example kreiramo varijable JWT_SECRET i JWT_EXPIRES_IN
-u tokenUtils.js fajl dodajemo kreirane varijable iz .env fajla

101. Http Only Cookie
-u authController.js fajl u funkciju login() dodajemo metodu res.cookie()
-dodajemo metodu res.status(StatusCodes.OK)
-kreiramo varijablu const oneDay
-u Postman-u testiramo rutu za login
-u Postman-u pogledamo vrijednost za opciju Cookie

102. Authenticate User Setup
-u JobModel.js fajlu, dodajemo konfiguracioni objekt createdBy
-u folderu middleware kreiramo authMiddleware.js fajl
-u authMiddleware.js fajlu kreiramo i eksportujemo asinhronu funkciju authenticateUser sa parametrima req, res i next
-u server.js fajl importujemo funkciju authenticateUser
-u metodu app.use() za rute za poslove dodajemo funkciju authenticateUser
-u Postman-u testiramo rutu za dohvacanje svih poslova

103. Verify Cookie
-u server.js fajl importujemo instancu cookieParser
-kreiramo metodu app.use(cookieParser())
-u Postman-u testiramo rutu za dohvacanje svih poslova
-u authMiddleware.js fajlu, u funkciji authenticateUser() destruktuiramo varijablu const { token } 
-dodajemo uslov if (!token)
-importujemo funkciju UnauthenticatedError
-u uslov if dodajemo funkciju UnauthenticatedError()
-u Postman-u testiramo rute za prijavu korisnika i dohvacanje svih poslova

104. Verify JWT
-u tokenUtils.js fajlu kreiramo i eksportujemo funkciju verifyJWT() sa parametrom token
-u funkciji verifyJWT() kreiramo varijablu const decoded
-u authMiddleware.js fajl importujemo funkciju verifyJWT
-u funkciji authenticateUser() kreiramo blokove koda try - catch
-u blok koda try dodajemo funkciju verifyJWT(token)
-vrijednost funkcije verifyJWT(token) pohranjujemo u varijablu const user
-iz funkcije verifyJWT(token) destruktuiramo varijable const { userId, role } 
-u Postman-u testiramo rute za prijavu korisnika i dohvacanje svih poslova

105. Add User to Job Routes
-u jobController.js fajl, u funkciju getAllJobs() u metodu Job.find() dodajemo opciju createdBy
-u funkciju createJob() dodajemo metodu req.body.createdBy 
-u Postman-u testiramo rute za novi posao sa drugim korisnikom
-u Postman-u testiramo rute za registraciju, prijavu, kreiranje i pretrazivanje svih poslova

106. Validate Owner
-u validationMiddleware.js fajlu, u funkciji validateIdParam kreiramo varijable const isAdmin i const isOwner
-dodajemo uslov if (!isAdmin && !isOwner) 
-importujemo funkciju UnauthorizedError() iz customErrors.js fajla
-u uslov if dodajemo funkciju UnauthorizedError()
-u funkciju withValidationErrors() dodajemo uslov if (errorMessages[0].startsWith('not authorized'))
-u uslov if dodajemo funkciju UnauthorizedError()
-u Postman-u testiramo rutu za pretrazivanje posla po id-u
