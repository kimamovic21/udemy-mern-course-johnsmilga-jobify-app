Mern Jobify App

Section 01: Introduction

01. Course Resources
02. Course Requirements
03. Free Resources
04. Video Blur Fixed
05. Course Review


Section 02: VS Code

06. VS Code
-instaliranje VS Code ekstenzija

07. VITE - Info
-otvorimo web stranicu https://vitejs.dev/guide/

08. VITE - Install
-u terminalu provjerimo trenutnu verziju npm-a sa komandom npm --version (8.12.1)
-u terminalu provjerimo trenutnu verziju node-a sa komandom node --version (21.6.2)
-u terminalu instaliramo VITE React.js aplikaciju sa komandom npm create vite@latest client
-odaberemo opciju biblioteku React i opciju Vanilla Javascript

09. VITE - Folder Structure
-u terminalu navigiramo u folder client sa komandom cd client 
-u folderu client instaliramo pakete sa komandom npm i

10. Remove Boilerplate
-obrisan App.css fajl
-manje izmjene u fajlovima index.css i documentation.txt

11. Obtain Assets
-u folder assets dodani folderi css, images, wrappers i README.md fajl

12. Global CSS
-u index.css fajl dodan CSS stil potreban za projekt
-u folderu assets izbrisemo README.md fajl

13. Title and Favicon
-u folder public dodajemo sliku favicon.ico
-u index.html fajl dodajemo sliku favicon.ico

14. Install All Libraries (Optional)
-u terminalu instaliramo potrebne pakete za projekt

15. React Router - Info

16. React Router - Initial Setup
-u komponentu App.jsx dodajemo logiku za React Router Dom
-u komponentu App.jsx importujemo funkciju createBrowserRouter i komponentu RouterProvider
-kreiramo varijablu const router
-komponenti RouterProvider dodajemo prop router 
-u prop router proslijedujemo vrijednost varijable router

17. Create Pages
-u folderu src kreiramo folder pages
-u folderu pages kreiramo index.js fajl
-u folderu pages kreiramo jsx komponente
-u komponentu App.jsx importujemo kreirane komponente

18. Setup index.js
-u index.js fajlu eksportujemo kreirane komponente
-u komponentu App.jsx importujemo komponente iz index.js fajla

19. Link Component
-u komponente Register.jsx i Login.jsx importujemo komponentu Link

20. Nested Routes
-u komponenti App.jsx, dodajemo niz children
-u niz children dodajemo vise objekata sa rutama
-dodajemo rutu index
-u komponentu HomeLayout.jsx importujemo komponentu Outlet

21. Error Page
-u komponentu App.jsx importujemo komponentu Error.jsx
-dodajemo opciju errorElement i vrijednost komponentu Error
-u komponentu Error.jsx importujemo komponentu Link i funkciju useRouteError
-vrijednost funkcije useRouteError() pohranjujemo u varijablu const error


Section 04: Landing Page

22. Styled Components - Intro
-u komponentu Landing.jsx importujemo instancu styled iz paketa Styled Components
-kreiramo varijablu const StyledBtn

23. Wrapper
-u komponenti Landing.jsx kreiramo stiliziranu varijablu komponentu const Wrapper
-u funkciji Landing(), u jsx-u dodajemo komponentu Wrapper sa otvorenim i zatvorenim tagom

24. Landing Page
-u komponentu Landing dodajemo slike iz foldera images
-kreiramo stilizirano varijablu komponentu const StyledWrapper
-u funkciju Landing() dodajemo komponentu StyledWrapper sa otvorenim i zatvorenim tagom

25. Landing Page - CSS (Optional)
-u komponenti LandingPage.jsx komponenti Wrapper klasama dodajemo CSS stil

26. Logo Component
-u folderu src kreiramo folder components
-u folderu components kreiramo komponentu Logo.jsx
-u folderu component kreiramo index.js fajl
-u index.js fajlu eksportujemo komponentu Logo
-u komponentu Landing.jsx dodajemo komponentu Logo.
-u jsx-u, u nav element dodajemo komponentu Logo 

27. Logo and Images
-otvorimo web stranicu https://undraw.co/ za pretrazivanje potrebnog Logo-a


Section 05: Error Page

28. Error Page - JSX
-u komponentu Error.jsx importujemo sliku i komponentu Wrapper
-dodajemo uslov if (error.status === 404)

29. Error Page - CSS (Optional)
-u ErrorPage.js fajlu dodajemo varijabli komponenti Wrapper CSS stil


Section 06: Register Page

30. Register Page - Setup
-u komponentu Register importujemo stiliziranu komponentu Wrapper iz RegisterAndLoginPage.js fajla
-importujemo sliku Logo
-u jsx-u kreiramo HTML elemente za registraciju
-input elementu dodajemo atribute type, id, name, className, defaultValue, required

31. FormRow Component
-u eslint.config.js fajlu dodajemo opciju 'react/prop-types': 'off'
-u folderu components kreiramo komponentu FormRow.jsx
-u komponenti FormRow.jsx, funkciji FormRow() dodajemo parametre destruktuirane props type, name, labelText, defaultValue = ''
-u jsx-u, atributima elementa input proslijedujemo vrijednost za prop
-u komponentu Register.jsx importujemo komponentu FormRow.jsx
-u jsx-u kreiramo vise komponenti FormRow za svako input polje
-svakoj komponenti FormRow dodajemo prop sa podacima
-u components/index.js fajlu eksportujemo komponentu FormRow


Section 07: LoginPage

32. LoginPage
-u komponentu Login.jsx importujemo stilizirano komponentu Wrapper iz RegisterAndLoginPage.js fajla
-importujemo komponentu FormRow i sliku Logo
-u jsx-u dodajemo komponente FormRow
-komponentama FormRow dodajemo vrijednosti za prop

33. Login and Register CSS (Optional)
-u RegisterAndLoginPage.js fajlu dodan CSS stil za stiliziranu komponentu Wrapper koja se koristi u komponentama Register.jsx i Login.jsx


Section 08: Dashboard Page

34. Dashboard Setup
-u komponentu App.jsx importujemo nove komponente
-u objekt ruti za rutu dashboard kreiramo novi niz children
-u nizu children kreiramo nove objekte za rute
-u komponentu DashboardLayout.jsx importujemo komponentu Outlet

35. Dashboard Structure
-u folderu components kreiramo tri nove komponente BigSidebar.jsx, SmallSidebar.jsx i Navbar.jsx
-u svaku komponentu importujemo odgovarajucu stiliziranu komponentu Wrapper
-u index.js fajlu eksportujemo kreirane rute
-u komponenetu DashboardLayout.jsx importujemo kreirane komponente

36. Dashboard CSS (optional)
-u folderu wrappers, u Dashboard.js fajlu klasama dodajemo CSS stil

37. Dashboard Context
-u komponenti DashboardLayout.jsx kreiramo varijablu const user
-kreiramo state varijablu showSidebar i set funkciju setShowSidebar
-kreiramo state varijablu isDarkTheme i set funkciju setIsDarkTheme
-kreiramo funkcije toogleDarkTheme(), toggleSidebar(), logoutUser()
-importujemo funkciju createContext iz paketa React
-u jsx dodajemo kreiramo komponentu DashboardContext.Provider sa otvorenim i zatvorenim tagom
-komponenti DashboardContext.Provider dodajemo prop value
-u prop value proslijedujemo objekt sa kreiranim varijablama koje se trebaju proslijediti
-importujemo funkciju useContext iz paketa React
-kreiramo i eksportujemo varijablu const useDashboardContext
-u komponentu SmallSidebar.jsx importujemo funkciju useDashboardContext()
-kreiramo varijablu const data

38. React Icons
-otvorimo web stranicu https://react-icons.github.io/react-icons/ da odaberemo potrebnu ikonicu
-u komponentu Navbar.jsx importujemo ikonicu FaHome

39. Navbar Structure
-u komponentu Navbar.jsx importujemo ikonicu FaAlignLeft 
-importujemo i kreiramo funkciju useDashboardContext
-iz vrijednosti funkcije useDashboardContext() destruktuiramo funkciju toggleSidebar

40. Navbar CSS (Optional)
-u wrappers/Navbar.js fajlu dodajemo klasama CSS stil 

41. Links Data
-u folderu src kreiramo folder utils i links.jsx fajl
-u links.jsx fajl importujemo React ikonice
-kreiramo varijablu niz const links
-u nizu links kreiramo objekte koji sadrze informacije o putanji rute, ime i ikonicu koju sadrze

42. Sidebar Structure
-u komponentu SmallSidebar.jsx importujemo i kreiramo funkcije  useDashboardContext()
-importujemo sliku Logo
-importujemo niz links
-u jsx-u nizu links dodajemo metodu map()
-importujemo komponentu NavLink iz paketa React Router Dom
-u metodi map anonimnoj funkciji dodajemo parametar link
-u metodi map() dodajemo komponentu NavLink koji sadrze prop to, key i className
-iz varijable link destruktuiramo varijable const { text, path, icon }

43. Sidebar Functionality
-u komponenti SmallSidebar.jsx destruktuiramo varijable showSidebar, toggleSidebar iz funkcije useDashboardContext()
-div elementu dodajemo dinamicku klasu za prikazivanje elementa Sidebar na malom ekranu
-u jsx-u komponenti NavLink dodajemo prop onClick
-u prop onClick proslijedujemo funkciju toggleSidebar
-komponenti NavLink dodajemo prop end

44. Sidebar CSS (optional)
-u wrappers/SmallSidebar.js fajlu dodan CSS stil za Sidebar

45. NavLinks Component
-u folderu components kreiramo komponentu NavLinks.jsx
-u komponentu NavLinks.jsx importujemo i kreiramo funkciju useDashboardContext()
-iz funkcije useDashboardContext() destruktuiramo varijable const { user, toggleSidebar }
-importujemo komponentu NavLink iz paketa React Router Dom
-u komponentu SmallSidebar.jsx importujemo komponentu NavLinks.jsx

46. Big Sidebar
-u komponentu BigSidebar.jsx importujemo i kreiramo funkciju useDashboardContext()
-iz funkcije useDashboardContext() destruktuiramo varijablu const showSidebar 
-u jsx-u div elementu dodajemo dinamicku klasu showSidebar
-importujemo komponentu NavLinks.jsx
-u jsx-u komponenti NavLinks dodajemo prop isBigSidebar
-u komponenti NavLinks.jsx, funkciji NavLinks() dodajemo parametar destruktuirani prop isBigSidebar
-u prop onClick dodajemo ternarni uslov isBigSidebar ? null : toggleSidebar

47. Big Sidebar CSS (Optional)
-u wrappers/BigSidebar.js fajlu dodajemo CSS stil za klase

48. Logout Container
-u folderu components kreiramo komponentu LogoutContainer.jsx
-u komponentu LogoutContainer.jsx importujemo i kreiramo funkciju useState()
-importujemo i kreiramo funkciju useDashboardContext()
-kreiramo state varijablu const showLogout i set funkciju setShowLogout
-iz funkcije useDashboardContext() destruktuiramo varijablu user i funkciju logoutUser
-importujemo stiliziranu komponentu Wrapper iz wrappers/LogoutContainer.js fajla
-u jsx-u button elementu dodajemo dogadaj onClick
-u jsx-u dodajemo uslov ternarni operator user.avatar
-div elementu dodajemo klasu ternarni operator showLogout
-u komponentu Navbar.jsx importujemo komponentu LogoutContainer.jsx
-button elementu dodajemo dogadaj onClick
-u dogadaj onClick proslijedujemo funkciju logoutUser

49. Logout Container CSS (optional)
-u wrappers/LogoutContainer.js fajlu dodajemo CSS stil za klase

50. Theme Toggle
-u folderu components kreiramo komponentu ToggleTheme.jsx 
-importujemo i kreiramo funkciju useDashboardContext()
-importujemo React ikonice
-importujemo stiliziranu komponentu Wrapper iz wrappers/ThemeToggle.js fajla
-destruktuiramo varijable const { isDarkTheme, toggleDarkTheme }
-u jsx-u komponenti Wrapper dodajemo prop onClick
-u prop onClick proslijedujemo funkciju toggleDarkTheme
-u jsx-u dodajemo ternani uslov za isDarkTheme za pojavljivanje React ikonica
-u komponentu Navbar.jsx importujemo komponentu ThemeToggle.jsx

51. Theme Toggle CSS (optional)
-u wrappers/ThemeToggle.js fajlu dodajemo CSS stil za klase

52. Dark Theme Logic
-u komponenti DashboardLayout.jsx dodajemo logiku u funkciju toggleDarkTheme()
-u funkciji toggleDarkTheme() kreiramo varijablu const newDarkTheme = !isDarkTheme
-dodajemo set funkciju setIsDarkTheme(newDarkTheme)
-dodajemo metodu document.body.classList.toggle()
-dodajemo metodu localStorage.setItem()
-kreiramo funkciju checkDefaultTheme()
-u funkciji checkDefaultTheme() kreiramo varijablu cpmst isDarkTheme
-dodajemo metodu document.body.classList.toggle()
-dodajemo return isDarkTheme
-u funkciju useState() za promjenu teme proslijedujemo funkciju checkDefaultTheme()
-u komponenti App.jsx kreiramo funkciju checkDefaultTheme()
-kreiramo varijablu const isDarkThemeEnabled
-u objekt ruti za komponentu DashboardLayout dodajemo prop isDarkThemeEnabled
-u prop isDarkThemeEnabled proslijedujemo vrijednost variable isDarkThemeEnabled
-u komponenti DashboardLayout.jsx, funkciji DashboardLayout() dodajemo parametar destruktuirani prop isDarkThemeEnabled
-u funkciju useState() za promjenu teme proslijedujemo varijablu isDarkThemeEnabled

53. Dark Theme Logic - Bug Fix
-u komponenti App.jsx eksportujemo funkciju checkDefaultTheme()
-u komponentu DashboardLayout.jsx importujemo funkciju checkDefaultTheme()
-u funkciju useState() proslijedujemo funkciju checkDefaultTheme()

54. Dark Theme CSS (optional)
-u index.css dodajemo CSS klase za promjenu boje teme 
