Mern Jobify App

Section 01: Introduction

01. Course Resources
02. Course Requirements
03. Free Resources
04. Video Blur Fixed
05. Course Review


Section 02: VS Code

06. VS Code
-instaliranje VS Code ekstenzija

07. VITE - Info
-otvorimo web stranicu https://vitejs.dev/guide/

08. VITE - Install
-u terminalu provjerimo trenutnu verziju npm-a sa komandom npm --version (8.12.1)
-u terminalu provjerimo trenutnu verziju node-a sa komandom node --version (21.6.2)
-u terminalu instaliramo VITE React.js aplikaciju sa komandom npm create vite@latest client
-odaberemo opciju biblioteku React i opciju Vanilla Javascript

09. VITE - Folder Structure
-u terminalu navigiramo u folder client sa komandom cd client 
-u folderu client instaliramo pakete sa komandom npm i

10. Remove Boilerplate
-obrisan App.css fajl
-manje izmjene u fajlovima index.css i documentation.txt

11. Obtain Assets
-u folder assets dodani folderi css, images, wrappers i README.md fajl

12. Global CSS
-u index.css fajl dodan CSS stil potreban za projekt
-u folderu assets izbrisemo README.md fajl

13. Title and Favicon
-u folder public dodajemo sliku favicon.ico
-u index.html fajl dodajemo sliku favicon.ico

14. Install All Libraries (Optional)
-u terminalu instaliramo potrebne pakete za projekt


Section 03: React Router

15. React Router - Info

16. React Router - Initial Setup
-u komponentu App.jsx dodajemo logiku za React Router Dom
-u komponentu App.jsx importujemo funkciju createBrowserRouter i komponentu RouterProvider
-kreiramo varijablu const router
-komponenti RouterProvider dodajemo prop router 
-u prop router proslijedujemo vrijednost varijable router

17. Create Pages
-u folderu src kreiramo folder pages
-u folderu pages kreiramo index.js fajl
-u folderu pages kreiramo jsx komponente
-u komponentu App.jsx importujemo kreirane komponente

18. Setup index.js
-u index.js fajlu eksportujemo kreirane komponente
-u komponentu App.jsx importujemo komponente iz index.js fajla

19. Link Component
-u komponente Register.jsx i Login.jsx importujemo komponentu Link

20. Nested Routes
-u komponenti App.jsx, dodajemo niz children
-u niz children dodajemo vise objekata sa rutama
-dodajemo rutu index
-u komponentu HomeLayout.jsx importujemo komponentu Outlet

21. Error Page
-u komponentu App.jsx importujemo komponentu Error.jsx
-dodajemo opciju errorElement i vrijednost komponentu Error
-u komponentu Error.jsx importujemo komponentu Link i funkciju useRouteError
-vrijednost funkcije useRouteError() pohranjujemo u varijablu const error


Section 04: Landing Page

22. Styled Components - Intro
-u komponentu Landing.jsx importujemo instancu styled iz paketa Styled Components
-kreiramo varijablu const StyledBtn

23. Wrapper
-u komponenti Landing.jsx kreiramo stiliziranu varijablu komponentu const Wrapper
-u funkciji Landing(), u jsx-u dodajemo komponentu Wrapper sa otvorenim i zatvorenim tagom

24. Landing Page
-u komponentu Landing dodajemo slike iz foldera images
-kreiramo stiliziranu varijablu komponentu const StyledWrapper
-u funkciju Landing() dodajemo komponentu StyledWrapper sa otvorenim i zatvorenim tagom

25. Landing Page - CSS (Optional)
-u komponenti LandingPage.jsx komponenti Wrapper klasama dodajemo CSS stil

26. Logo Component
-u folderu src kreiramo folder components
-u folderu components kreiramo komponentu Logo.jsx
-u folderu component kreiramo index.js fajl
-u index.js fajlu eksportujemo komponentu Logo
-u komponentu Landing.jsx dodajemo komponentu Logo.
-u jsx-u, u nav element dodajemo komponentu Logo 

27. Logo and Images
-otvorimo web stranicu https://undraw.co/ za pretrazivanje potrebnog Logo-a


Section 05: Error Page

28. Error Page - JSX
-u komponentu Error.jsx importujemo sliku i komponentu Wrapper
-dodajemo uslov if (error.status === 404)

29. Error Page - CSS (Optional)
-u ErrorPage.js fajlu dodajemo varijabli komponenti Wrapper CSS stil


Section 06: Register Page

30. Register Page - Setup
-u komponentu Register importujemo stiliziranu komponentu Wrapper iz RegisterAndLoginPage.js fajla
-importujemo sliku Logo
-u jsx-u kreiramo HTML elemente za registraciju
-input elementu dodajemo atribute type, id, name, className, defaultValue, required

31. FormRow Component
-u eslint.config.js fajlu dodajemo opciju 'react/prop-types': 'off'
-u folderu components kreiramo komponentu FormRow.jsx
-u komponenti FormRow.jsx, funkciji FormRow() dodajemo parametre destruktuirane props type, name, labelText, defaultValue = ''
-u jsx-u, atributima elementa input proslijedujemo vrijednost za prop
-u komponentu Register.jsx importujemo komponentu FormRow.jsx
-u jsx-u kreiramo vise komponenti FormRow za svako input polje
-svakoj komponenti FormRow dodajemo prop sa podacima
-u components/index.js fajlu eksportujemo komponentu FormRow


Section 07: LoginPage

32. LoginPage
-u komponentu Login.jsx importujemo stiliziranu komponentu Wrapper iz RegisterAndLoginPage.js fajla
-importujemo komponentu FormRow i sliku Logo
-u jsx-u dodajemo komponente FormRow
-komponentama FormRow dodajemo vrijednosti za prop

33. Login and Register CSS (Optional)
-u RegisterAndLoginPage.js fajlu dodan CSS stil za stiliziranu komponentu Wrapper koja se koristi u komponentama Register.jsx i Login.jsx


Section 08: Dashboard Page

34. Dashboard Setup
-u komponentu App.jsx importujemo nove komponente
-u objekt ruti za rutu dashboard kreiramo novi niz children
-u nizu children kreiramo nove objekte za rute
-u komponentu DashboardLayout.jsx importujemo komponentu Outlet

35. Dashboard Structure
-u folderu components kreiramo tri nove komponente BigSidebar.jsx, SmallSidebar.jsx i Navbar.jsx
-u svaku komponentu importujemo odgovarajucu stiliziranu komponentu Wrapper
-u index.js fajlu eksportujemo kreirane rute
-u komponentu DashboardLayout.jsx importujemo kreirane komponente

36. Dashboard CSS (optional)
-u folderu wrappers, u Dashboard.js fajlu klasama dodajemo CSS stil

37. Dashboard Context
-u komponenti DashboardLayout.jsx kreiramo varijablu const user
-kreiramo state varijablu showSidebar i set funkciju setShowSidebar
-kreiramo state varijablu isDarkTheme i set funkciju setIsDarkTheme
-kreiramo funkcije toogleDarkTheme(), toggleSidebar(), logoutUser()
-importujemo funkciju createContext iz paketa React
-u jsx dodajemo kreiramo komponentu DashboardContext.Provider sa otvorenim i zatvorenim tagom
-komponenti DashboardContext.Provider dodajemo prop value
-u prop value proslijedujemo objekt sa kreiranim varijablama koje se trebaju proslijediti
-importujemo funkciju useContext iz paketa React
-kreiramo i eksportujemo varijablu const useDashboardContext
-u komponentu SmallSidebar.jsx importujemo funkciju useDashboardContext()
-kreiramo varijablu const data

38. React Icons
-otvorimo web stranicu https://react-icons.github.io/react-icons/ da odaberemo potrebnu ikonicu
-u komponentu Navbar.jsx importujemo ikonicu FaHome

39. Navbar Structure
-u komponentu Navbar.jsx importujemo ikonicu FaAlignLeft 
-importujemo i kreiramo funkciju useDashboardContext
-iz vrijednosti funkcije useDashboardContext() destruktuiramo funkciju toggleSidebar

40. Navbar CSS (Optional)
-u wrappers/Navbar.js fajlu dodajemo klasama CSS stil 

41. Links Data
-u folderu src kreiramo folder utils i links.jsx fajl
-u links.jsx fajl importujemo React ikonice
-kreiramo varijablu niz const links
-u nizu links kreiramo objekte koji sadrze informacije o putanji rute, ime i ikonicu koju sadrze

42. Sidebar Structure
-u komponentu SmallSidebar.jsx importujemo i kreiramo funkcije  useDashboardContext()
-importujemo sliku Logo
-importujemo niz links
-u jsx-u nizu links dodajemo metodu map()
-importujemo komponentu NavLink iz paketa React Router Dom
-u metodi map anonimnoj funkciji dodajemo parametar link
-u metodi map() dodajemo komponentu NavLink koji sadrze prop to, key i className
-iz varijable link destruktuiramo varijable const { text, path, icon }

43. Sidebar Functionality
-u komponenti SmallSidebar.jsx destruktuiramo varijable showSidebar, toggleSidebar iz funkcije useDashboardContext()
-div elementu dodajemo dinamicku klasu za prikazivanje elementa Sidebar na malom ekranu
-u jsx-u komponenti NavLink dodajemo prop onClick
-u prop onClick proslijedujemo funkciju toggleSidebar
-komponenti NavLink dodajemo prop end

44. Sidebar CSS (optional)
-u wrappers/SmallSidebar.js fajlu dodan CSS stil za Sidebar

45. NavLinks Component
-u folderu components kreiramo komponentu NavLinks.jsx
-u komponentu NavLinks.jsx importujemo i kreiramo funkciju useDashboardContext()
-iz funkcije useDashboardContext() destruktuiramo varijable const { user, toggleSidebar }
-importujemo komponentu NavLink iz paketa React Router Dom
-u komponentu SmallSidebar.jsx importujemo komponentu NavLinks.jsx

46. Big Sidebar
-u komponentu BigSidebar.jsx importujemo i kreiramo funkciju useDashboardContext()
-iz funkcije useDashboardContext() destruktuiramo varijablu const showSidebar 
-u jsx-u div elementu dodajemo dinamicku klasu showSidebar
-importujemo komponentu NavLinks.jsx
-u jsx-u komponenti NavLinks dodajemo prop isBigSidebar
-u komponenti NavLinks.jsx, funkciji NavLinks() dodajemo parametar destruktuirani prop isBigSidebar
-u prop onClick dodajemo ternarni uslov isBigSidebar ? null : toggleSidebar

47. Big Sidebar CSS (Optional)
-u wrappers/BigSidebar.js fajlu dodajemo CSS stil za klase

48. Logout Container
-u folderu components kreiramo komponentu LogoutContainer.jsx
-u komponentu LogoutContainer.jsx importujemo i kreiramo funkciju useState()
-importujemo i kreiramo funkciju useDashboardContext()
-kreiramo state varijablu const showLogout i set funkciju setShowLogout
-iz funkcije useDashboardContext() destruktuiramo varijablu user i funkciju logoutUser
-importujemo stiliziranu komponentu Wrapper iz wrappers/LogoutContainer.js fajla
-u jsx-u button elementu dodajemo dogadaj onClick
-u jsx-u dodajemo uslov ternarni operator user.avatar
-div elementu dodajemo klasu ternarni operator showLogout
-u komponentu Navbar.jsx importujemo komponentu LogoutContainer.jsx
-button elementu dodajemo dogadaj onClick
-u dogadaj onClick proslijedujemo funkciju logoutUser

49. Logout Container CSS (optional)
-u wrappers/LogoutContainer.js fajlu dodajemo CSS stil za klase

50. Theme Toggle
-u folderu components kreiramo komponentu ToggleTheme.jsx 
-importujemo i kreiramo funkciju useDashboardContext()
-importujemo React ikonice
-importujemo stiliziranu komponentu Wrapper iz wrappers/ThemeToggle.js fajla
-destruktuiramo varijable const { isDarkTheme, toggleDarkTheme }
-u jsx-u komponenti Wrapper dodajemo prop onClick
-u prop onClick proslijedujemo funkciju toggleDarkTheme
-u jsx-u dodajemo ternarni uslov za isDarkTheme za pojavljivanje React ikonica
-u komponentu Navbar.jsx importujemo komponentu ThemeToggle.jsx

51. Theme Toggle CSS (optional)
-u wrappers/ThemeToggle.js fajlu dodajemo CSS stil za klase

52. Dark Theme Logic
-u komponenti DashboardLayout.jsx dodajemo logiku u funkciju toggleDarkTheme()
-u funkciji toggleDarkTheme() kreiramo varijablu const newDarkTheme = !isDarkTheme
-dodajemo set funkciju setIsDarkTheme(newDarkTheme)
-dodajemo metodu document.body.classList.toggle()
-dodajemo metodu localStorage.setItem()
-kreiramo funkciju checkDefaultTheme()
-u funkciji checkDefaultTheme() kreiramo varijablu cpmst isDarkTheme
-dodajemo metodu document.body.classList.toggle()
-dodajemo return isDarkTheme
-u funkciju useState() za promjenu teme proslijedujemo funkciju checkDefaultTheme()
-u komponenti App.jsx kreiramo funkciju checkDefaultTheme()
-kreiramo varijablu const isDarkThemeEnabled
-u objekt ruti za komponentu DashboardLayout dodajemo prop isDarkThemeEnabled
-u prop isDarkThemeEnabled proslijedujemo vrijednost varijable isDarkThemeEnabled
-u komponenti DashboardLayout.jsx, funkciji DashboardLayout() dodajemo parametar destruktuirani prop isDarkThemeEnabled
-u funkciju useState() za promjenu teme proslijedujemo varijablu isDarkThemeEnabled

53. Dark Theme Logic - Bug Fix
-u komponenti App.jsx eksportujemo funkciju checkDefaultTheme()
-u komponentu DashboardLayout.jsx importujemo funkciju checkDefaultTheme()
-u funkciju useState() proslijedujemo funkciju checkDefaultTheme()

54. Dark Theme CSS (optional)
-u index.css dodajemo CSS klase za promjenu boje teme 


Section 09: Server

55. Folder Structure
-u root folderu, u terminalu ukucamo komandu npm init -y da generisemo package.json fajl
-u terminal ukucamo komandu node server
-u terminalu treba da se prikaze poruka console.log() ako je sve uredu

56. ES6 Modules
-u package.json fajl dodajemo opciju "type": "module"
-kreiramo dva fajla test-named.js i test-default.js
-u tim fajlovima kreiramo i eksportujemo varijable
-u server.js fajl importujemo kreirane varijable
-u terminal ukucamo komandu node server da vidimo vrijednost varijabli 

57. Install Server Packages
-u terminalu instaliramo potrebne pakete za server dio projekta
-u package.json fajlu u objektu scripts dodajemo komandu "setup-project": "npm i && cd client && npm i"
-u terminal ukucamo komandu npm run setup-project sa kojom u istom vrijeme instaliramo pakete za client i server dio

58. Express and Nodemon
-u server.js fajl importujemo instancu express
-kreiramo varijablu const app
-kreiramo metodu app.get()
-kreiramo metodu app.listen()
-u package.json fajl dodajemo komandu "dev": "nodemon server.js"
-u terminal ukucamo komandu npm run dev da pokrenemo Node.js - Express server

59. Thunder Client 
-otvorimo web stranicu https://www.thunderclient.com/
-mozemo koristiti i Postman
-u Postman-u kreiramo novu kolekciju Udemy - MERN Course Jogn Smilga Jobify App
-kreiramo novi zahtjev Home Route 
-testiramo rutu http://localhost:5100 sa metodom GET

60. JSON Middleware
-u server.js fajlu kreiramo metodu app.use(express.json())
-kreiramo metodu app.post()
-u Postman-u kreiramo novi zahtjev Home Route Post i testiramo rutu http://localhost:5100 sa metodom POST

61. Morgan and Dotenv
-u server.js fajl importujemo instancu morgan
-kreiramo metodu app.use(morgan('dev'))
-kreiramo fajlove .env i env.example
-u fajlovima .env i env.example kreiramo varijable NODE_ENV i PORT
-u server.js fajlu importujemo dotenv instancu
-instanci dotenv dodajemo metodu config()
-dodajemo uslov if (process.env.NODE_ENV === 'development')
-kreiramo varijablu const port

62. New Node Features (optional)
-u server.js fajlu kreiramo metodu fetch()
-kreiramo funkciju getData()
-kreiramo metode try - catch
-u package.json fajlu u objektu scripts dodajemo komandu "watch": "node --watch server.js"
-u terminal ukucamo komandu npm run watch da pokrenemo server

63. Get All Jobs
-importujemo funkciju nanoid iz paketa nanoid
-kreiramo varijablu niz let jobs
-kreiramo metodu app.get('/api/v1/jobs')
-u Postman testiramo rutu http://localhost:5100/api/v1/jobs sa metodom GET
-u Postman-u kreiramo folder Job Routes gdje cemo pohranjivati sve rute vezane za poslove
-u Postman-u u postavkama za Environments kreiramo globalnu varijablu URL

64. Create Job
-varijabla URL sadrzi link http://localhost:5100/api/v1
-u server.js fajlu kreiramo metodu app.post('/api/v1/jobs') za kreiranje poslova
-u funkciji (req, res) destruktuiramo varijable const { company, position }
-dodajemo uslov if (!company || !position)
-u uslov if dodajemo metodu res.status(400)
-kreiramo varijablu const id
-kreiramo varijablu objekt const job
-dodajemo metodu jobs.push(job)
-dodajemo metodu res.status(200)
-u Postman-u testiramo rutu {{URL}}/jobs sa metodom POST

65. Get Single Job
-u server.js fajlu kreiramo metodu app.get('/api/v1/jobs/:id')
-u funkciji (req, res) destruktuiramo varijablu const { id } 
-kreiramo varijablu const job
-dodajemo uslov if (!job)
-u uslov if dodajemo return res.status(404)
-dodajemo metodu res.status(200)
-u Postman-u testiramo rutu {{URL}}/jobs/:id sa metodom GET

66. Edit Job
-u server.js fajlu kreiramo metodu app.patch('/api/v1/jobs/:id')
-u funkciji (req, res) destruktuiramo varijable const { company, position } 
-dodajemo uslov if (!company || !position)
-u uslov if dodajemo metodu res.status(400)
-destruktuiramo varijablu const { id }
-kreiramo varijablu const job
-dodajemo uslov if (!job)
-u uslov if (!job) dodajemo metodu res.status(404)
-nove izmjenjene podatke pohranjujemo u job.company = company i job.position = position
-dodajemo metodu res.status(200)
-u Postman-u testiramo rutu {{URL}}/jobs/:id sa metodom PATCH

67. Delete Job
-u server.js fajlu kreiramo metodu app.delete('/api/v1/jobs/:id')
-u funkciji (req, res) destruktuiramo varijablu const { id } 
-kreiramo varijablu const job 
-dodajemo uslov if (!job)
-u uslov if (job) dodajemo metodu res.status(404)
-kreiramo varijablu const newJobs
-redeklarisemo varijablu jobs sa novom vrijednosti iz varijable newJobs
-dodajemo metodu res.status(200)
-u Postman-u testiramo rutu {{URL}}/jobs/:id sa metodom DELETE

68. Not Found and Error Route
-u server.js fajlu kreiramo metod app.use('*')
-dodajemo metodu res.status(404)
-kreiramo metodu app.use((err, req, res, next) => {...})
-dodajemo metodu res.status(500)

69. Not Found vs Error Route
-u server.js fajlu, u funkciji za dohvacanje posla, u uslov if dodajemo objekt throw new Error()

70. Controller and Router
-kreiramo folder controllers
-u folderu controllers kreiramo jobController.js fajl
-u jobController.js fajl premjestamo CRUD funkcije za poslove iz server.js fajla
-anonimnim funkcijama (req, res) dodjeljujemo imena 
-eksportujemo kreirane funkcije
-kreiramo folder routes
-u folderu routes kreiramo jobRouter.js fajl
-u jobRouter.js fajl importujemo CRUD funkcije za poslove iz jobController.js fajla
-importujemo funkciju Router iz Express paketa
-vrijednost funkcije Router() pohranjujemo u varijablu const router
-kreiramo metode router.route()
-varijablu router eksportujemo kao default
-u server.js fajlu importujemo varijablu jobRouter iz jobRouter.js fajla
-kreiramo metodu app.use('/api/v1/jobs', jobRouter)

71. MongoDB

72. Atlas Account
-otvorimo web stranicu https://www.mongodb.com/products/platform/atlas-database
-kreiramo novi racun ako nemamo postojeci
-kreiramo bazu podatataka na MongoDB Atlas-u
-kreiramo novi Connection string
-u fajlovima .env i .env.example kreiramo varijablu MONGO_URL

73. Mongoose
-otvorimo web stranicu https://mongoosejs.com/

74. Connect DB
-u server.js fajl importujemo instancu mongoose
-kreiramo blokove koda try - catch
-u blok koda try dodajemo metodu mongoose.connect()
-dodajemo metodu app.listen()
-u blok koda catch dodajemo console.error(error)
-dodajemo metodu process.exit(1)

75. Job Model
-kreiramo folder models
-u folderu models kreiramo JobModel.js fajl
-u JobModel.js fajl importujemo instancu mongoose
-kreiramo varijablu const JobSchema
-u funkciju Schema() dodajemo konfiguracione objekte
-eksportujemo mongoose.model() kao default

76. Create Job Controller
-u jobController.js fajl importujemo model Job 
-u asinhronu funkciju createJob() dodajemo metodu await Job.create()
-u Postman-u testiramo rutu za kreiranje posla

77. Async Errors
-u jobController.js fajlu, u metodi Job.create() dodajemo string da testiramo gresku prilikom slanja podataka u bazu
-importujemo paket Express Async Errors

78. Get All Jobs and Get Single Job
-u jobController.js fajlu, u funkciji getAllJobs() dodajemo metodu Job.find()
-u funkciju za kreiranje poslova dodajemo Job.create(req.body)
-u Postman-u kreiramo vise poslova 
-u funkciju getJob() dodajemo metodu await Job.findById(id)
-u Postman-u testiramo rutu za pretrazivanje poslova i posla po id-u

79. Delete and Update Job
-u funkciju deleteJob() dodajemo metoda await Job.findByIdAndDelete(id)
-u funkciju updateJob() dodajemo metodu await Job.findByIdAndUpdate()
-u Postman-u testiramo rute za izmjenu i brisanje posla

80. Status Codes
-u jobController.js fajl importujemo objekt StatusCodes iz paketa HTTP Status Codes

81. Custom Error
-kreiramo folder errors
-u folderu error kreiramo customErrors.js fajl
-u customErrors.js fajl importujemo objekt StatusCodes
-eksportujemo klasu classNotFoundError
-u jobController.js fajl, importujemo klasu NotFoundError
-u funkciju getJob() dodajemo NotFoundError()
-kreiramo folder middleware
-u folderu middleware kreiramo errorHandlerMiddleware.js fajl
-u errorHandlerMiddleware.js fajlu kreiramo funkciju errorHandlerMiddleware() sa parametrima err, req, res i next
-u funkciju errorHandlerMiddleware() dodajemo metodu res.status(500)
-kreiramo varijable const statusCode i const msg
-dodajemo metodu res.status(statusCode)
-eksportujemo funkciju kao default
-u server.js fajl importujemo funkciju errorHandlerMiddleware
-kreiramo metodu app.use(errorHandlerMiddleware)
-u jobController.js fajlu, u funkcije updateJob() i deleteJob() dodajemo funkciju NotFoundError()

82. More Custom Errors
-u customErrors.js fajlu kreiramo klase BadRequestError, UnauthenticatedError i UnauthorizedError

83. Validation Layer - Intro

84. Express Validator - Setup
-u server.js fajlu dodajemo metodu app.post() za rutu '/api/v1/test'
-importujemo funkcije body i validationResult iz paketa Express Validator
-u metodu app.post() dodajemo funkcije body i validationResult
-u metodi app.post() prvi argument je ruta
-drugi argument je niz za validaciju
-treci argument je anonimna funkcija (req, res) za validaciju
-cetrvti argument je anonimna funkcija (req, res)
-u anonimnoj funkciji (req, res) kreiramo varijablu const errors
-dodajemo uslov if (!errors.isEmpty())
-u uslovu if kreiramo varijablu const errorMessages 

85. Validation Middleware
-u folderu middleware kreiramo validationMiddleware.js fajl
-u validationMiddleware.js fajlu kreiramo funkciju withValidationErrors() sa parametrom validateValues
-importujemo funkcije body i validationResult iz paketa Express Validator
-importujemo funkciju BadRequestError iz customErrors.js fajla
-u return izjavu dodajemo niz
-u niz dodajemo parametar validateValues i anonimnu funkciju sa parametrima (req, res, next)
-kreiramo funkciju withValidationErrors() sa nizom kao argumentom
-vrijednost funkcije withValidationErrors() pohranjujemo u varijablu const validateTest
-eksportujemo varijablu validateTest
-u server.js fajl importujemo funkciju validateTest
-u metodu app.post() dodajemo funkciju validateTest

86. Constants
-kreiramo foler utils i constants.js fajl
-u constants.js fajlu kreiramo i eksportujemo varijable JOB_STATUS, JOB_TYPE, JOB_SORT_BY
-u model JobModel.js fajl importujemo kreirane varijable konstante
-u opcije enum dodajemo metode Object.values(JOB_STATUS) i Object.values(JOB_TYPE) 

87. Validate Job Input
-u validationMiddleware.js fajlu kreiramo i eksportujemo varijablu validateJobInput
-importujemo varijable konstante JOB_STATUS, JOB_TYPE
-u funkciju withValidationErrors() dodajemo niz za validaciju polja
-u jobRouter.js fajl importujemo funkciju validateJobInput
-u rute za poslove dodajemo funkciju validateJobInput
-testiramo rute u Postman-u za kreiranje poslova i izmjenu informacija o poslu

88. Validate ID Params
-u validationMiddleware.js fajl importujemo funkciju param iz paketa Express Validator
-kreiramo i eksportujemo varijablu const validateIdParam
-u funkciji withValidationErrors() kreiramo niz za validaciju parametra
-u jobRouter.js fajl importujemo funkciju validateIdParam
-u Postman-u testiramo rutu za izmjenu podataka jednog posla po id-u

89. Validate Job
-u validationMiddleware.js fajlu, u funkciji validateIdParam() kreiramo varijablu const isValidId
-importujemo model Job
-importujemo funkciju NotFoundError iz customErrors.js fajla
-dodajemo uslov if (!isValidId)
-kreiramo varijablu const job
-dodajemo uslov if (!job)
-u uslov if (!errors.isEmpty()) dodajemo jos jedan uslov if (errorMessages[0].startsWith('no job'))
-u jobController.js fajlu brisemo uslove if
-brisemo varijable const { id }

90. User Model
-u folderu models kreiramo UserModel.js fajl
-kreiramo varijablu const UserSchema
-eksportujemo model kao default User
-iz baze MongoDB izbrisemo postojece poslove

91. User Controller and Router
-u folderu controllers kreiramo asinhrone funkcije register() i login()
-u folderu routes kreiramo authRouter.js fajl
-u authRouter.js fajl importujemo funkciju Router
-importujemo funkcije register i login i authController.js fajla
-kreiramo dvije metode router.post() za rute register i login
-varijablu router eksportujemo kao default
-u server.js fajl importujemo varijablu router iz authRouter.js fajla kao authRouter
-kreiramo metodu app.use('/api/v1/auth')
-u Postman-u kreiramo folder Auth Routes
-u folderu Auth Routes kreiramo dva zahtjeva za rute register i login sa metodom POST
-testiramo kreirane rute

92. Create User
-u authController.js fajlu, u funkciji register() kreiramo varijablu const user
-dodajemo metodu res.status(StatusCodes.CREATED)
-u Postman-u testiramo rutu za kreiranje korisnika

93. Validate Register User
-u validationMiddleware.js fajlu kreiramo i eksportujemo varijablu export const validateRegisterInput
-importujemo model User iz UserModel.js fajla
-u funkciju withValidationErrors() dodajemo niz za validaciju
-u funkciju custom() dodajemo asinhronu anonimnu funkciju sa parametrom email
-u anonimnoj funkciji kreiramo varijablu const user
-dodajemo uslov if (user)
-u uslovu if (user) dodajemo funkciju throw new BadRequestError()
-u authRouter.js fajl importujemo funkciju validateRegisterInput
-u metodu app.post() za registraciju dodajemo funkciju validateRegisterInput
-u Postman-u testiramo rutu za kreiranje korisnika da provjerimo validaciju

94. Admin User
-u authController.js fajlu, u funkciji register() dodajemo logiku da prvi kreirani korisnik ima rolu admin¸
-kreiramo varijablu const isFirstAccount
-u Postman-u testiramo rutu za kreiranje korisnika kreirajuci drugog korisnika 

95. Hash Password
-u authController.js fajl importujemo instancu bcrypt iz paketa Bcrypt.js
-kreiramo varijable const salt i const hashedPassword

96. Hash Utils
-u folderu utils kreiramo passwordUtils.js fajl
-u passwordUtils.js fajlu kreiramo i eksportujemo asinhronu funkciju hashPassword() sa parametrom password
-u authController.js fajl importujemo funkciju hashPassword
-u funkciju register() dodajemo funkciju hashPassword()
-u funkciju hashPassword() proslijedujemo argument req.body.password
-u Postman-u testiramo rutu za kreiranje korisnika

97. Validate Login
-u validationMiddleware.js fajlu kreiramo i eksportujemo varijablu const validateLoginInput
-u funkciju withValidationErrors() dodajemo niz za validaciju login polja
-u authRouter.js fajl importujemo funkciju validateLoginInput
-u rutu za login dodajemo funkciju validateLoginInput
-u Postman-u testiramo rutu za prijavu korisnika

98. Login Logic
-u authController.js fajlu, u funkciji login() kreiramo varijablu const user
-dodajemo uslov if(!user)
-u passwordUtils.js fajlu kreiramo i eksportujemo asinhronu funkciju comparePassword() sa parametrima password i hashPassword
-u funkciji comparePassword() kreiramo varijablu const isMatch
-u authController.js fajl importujemo funkciju comparePassword() iz passwordUtils.js fajl
-u authController.js fajlu u funkciji login() kreiramo varijablu const isPasswordCorrect
-dodajemo uslov if (!isPasswordCorrect)
-kreiramo varijablu const isValidUser
-dodajemo uslov if (!isValidUser)
-importujemo funkciju UnauthenticatedError 
-u uslov if(!isValidUser) dodajemo funkciju UnauthenticatedError()
-u Postman-u testiramo rutu za prijavu korisnika

99. JWT (JSON Web Token)
-otvorimo web stranicu https://jwt.io/
-u folderu utils kreiramo tokenUtils.js fajl
-u tokenUtils.js fajl importujemo instancu jwt iz pakete Json Web Token
-kreiramo i eksportujemo funkciju create JWT() sa parametrom payload
-u funkciji createJWT() kreiramo varijablu const token
-u authController.js fajl importujemo funkciju createJWT
-importujemo funkciju createJWT iz tokenUtils.js fajla
-u funkciju login() dodajemo funkciju createJWT()
-funkciji createJWT() dodajemo argument objekt sa informacijama o korisnikovom id-u i roli
-vrijednost funkcije createJWT() pohranjujemo u varijablu const token
-dodajemo metodu res.send({ token })
-u Postman-u testiramo rutu za prijavu korisnika

100. JWT ENV
-u fajlovima .env i .env.example kreiramo varijable JWT_SECRET i JWT_EXPIRES_IN
-u tokenUtils.js fajl dodajemo kreirane varijable iz .env fajla

101. Http Only Cookie
-u authController.js fajl u funkciju login() dodajemo metodu res.cookie()
-dodajemo metodu res.status(StatusCodes.OK)
-kreiramo varijablu const oneDay
-u Postman-u testiramo rutu za login
-u Postman-u pogledamo vrijednost za opciju Cookie

102. Authenticate User Setup
-u JobModel.js fajlu, dodajemo konfiguracioni objekt createdBy
-u folderu middleware kreiramo authMiddleware.js fajl
-u authMiddleware.js fajlu kreiramo i eksportujemo asinhronu funkciju authenticateUser sa parametrima req, res i next
-u server.js fajl importujemo funkciju authenticateUser
-u metodu app.use() za rute za poslove dodajemo funkciju authenticateUser
-u Postman-u testiramo rutu za dohvacanje svih poslova

103. Verify Cookie
-u server.js fajl importujemo instancu cookieParser
-kreiramo metodu app.use(cookieParser())
-u Postman-u testiramo rutu za dohvacanje svih poslova
-u authMiddleware.js fajlu, u funkciji authenticateUser() destruktuiramo varijablu const { token } 
-dodajemo uslov if (!token)
-importujemo funkciju UnauthenticatedError
-u uslov if dodajemo funkciju UnauthenticatedError()
-u Postman-u testiramo rute za prijavu korisnika i dohvacanje svih poslova

104. Verify JWT
-u tokenUtils.js fajlu kreiramo i eksportujemo funkciju verifyJWT() sa parametrom token
-u funkciji verifyJWT() kreiramo varijablu const decoded
-u authMiddleware.js fajl importujemo funkciju verifyJWT
-u funkciji authenticateUser() kreiramo blokove koda try - catch
-u blok koda try dodajemo funkciju verifyJWT(token)
-vrijednost funkcije verifyJWT(token) pohranjujemo u varijablu const user
-iz funkcije verifyJWT(token) destruktuiramo varijable const { userId, role } 
-u Postman-u testiramo rute za prijavu korisnika i dohvacanje svih poslova

105. Add User to Job Routes
-u jobController.js fajl, u funkciju getAllJobs() u metodu Job.find() dodajemo opciju createdBy
-u funkciju createJob() dodajemo metodu req.body.createdBy 
-u Postman-u testiramo rute za novi posao sa drugim korisnikom
-u Postman-u testiramo rute za registraciju, prijavu, kreiranje i pretrazivanje svih poslova

106. Validate Owner
-u validationMiddleware.js fajlu, u funkciji validateIdParam kreiramo varijable const isAdmin i const isOwner
-dodajemo uslov if (!isAdmin && !isOwner) 
-importujemo funkciju UnauthorizedError() iz customErrors.js fajla
-u uslov if dodajemo funkciju UnauthorizedError()
-u funkciju withValidationErrors() dodajemo uslov if (errorMessages[0].startsWith('not authorized'))
-u uslov if dodajemo funkciju UnauthorizedError()
-u Postman-u testiramo rutu za pretrazivanje posla po id-u

107. Logout Controller
-u authController.js fajlu kreiramo i eksportujemo funkciju logout()
-u funkciji logout() kreiramo metodu res.cookie()
-dodajemo metodu res.status(StatusCodes.OK)
-u authRouter.js fajl importujemo funkciju logout iz authController.js fajla
-kreiramo metodu router.get('/logout', logout)
-u Postman-u kreiramo i testiramo rutu Logout User sa metodom GET za odjavu korisnika
-testiramo rute za dohvacanje svih poslova

108. User Routes
-u folderu controllers kreiramo userController.js fajl
-u userController.js fajl importujemo instancu StatusCodes
-kreiramo i eksportujemo funkcije getCurrentUser(), getApplicationStats(), getCurrentUser()
-u kreirane funkcije dodajemo metode res.status(StatusCodes.OK)
-u folderu routes kreiramo userRouter.js fajl
-u userRouter.js fajlu kreiramo dvije metode router.get() i jednu metodu router.patch()
-importujemo funkcije iz authController.js fajla
-u server.js fajl importujemo funkciju userRouter iz userRouter.js fajla
-kreiramo metodu app.use() za funkciju userRouter
-u Postman-u kreiramo folder User Routes
-kreiramo i testiramo rute Get Current User, Get Application Stats, Update User

109. Get Current User
-u userController.js fajlu, u funkciji getCurrentUser() kreiramo varijablu const user
-kreiramo varijablu const userWithoutPassword
-u UserModel.js fajl dodajemo metodu UserSchema.methods.toJSON

110. Update User
-u userController.js fajlu, u funkciji updateUser() kreiramo varijablu const updatedUser
-u validationMiddleware.js fajlu kreiramo i eksportujemo varijablu validateUpdateUserInput
-u funkciju withValidationErrors() dodajemo niz za validaciju polja
-u userRouter.js fajl importujemo funkciju validateUpdateUserInput
-u rutu za router.patch() dodajemo funkciju validateUpdateUserInput
-u userController.js fajlu, u funkciji updateUser() kreiramo varijablu const obj = { ...req.body }
-dodajemo metodu delete obj.password
-u Postman-u testiramo rutu za izmjenu podataka korisnika

111. Get Application Stats
-u userController.js fajl importujemo model Job
-u userController.js fajlu, u funkciji getApplicationStats() kreiramo varijable const users i const jobs
-u authMiddleware.js fajlu kreiramo i eksportujemo funkciju authorizePermissions() sa parametrom ...roles
-importujemo funkciju UnauthorizedError 
-u userRouter.js fajl importujemo funkciju authorizePermissions
-u metodu router.get() za dohvacanje podataka o statistici dodajemo niz i funkciju authorizePermissions()
-u Postman-u testiramo rute za prijavu korisnika i dohvacanje podataka o statistici

112. Proxy Setup
-u server.js fajlu kreiramo metodu app.get() za rutu /api/v1/test
-u folderu client u main.jsx fajlu kreiramo metodu fetch()
-u vite.config.js fajl, u funkciju defineConfig() dodajemo konfiguracioni objekt server
-kad otvorimo Vite React.js aplikaciju u konzoli trebamo vidjeti {msg: 'test route'}

113. Concurrently
-u package.json fajlu dodajemo komandu "dev" za paket Concurrently

114. Axios
-u main.jsx fajl importujemo instancu axios iz paketa Axios
-kreiramo metodu await axios.get()
-vrijednost metode axios.get() pohranjujemo u varijablu const data
-u folderu client, u folderu utils kreiramo customFetch.js fajl
-u customFetch.js fajl importujemo instancu axios iz paketa Axios
-kreiramo metodu axios.create()
-u funkciji create() kreiramo konfiguracioni objekt
-vrijednost metode axios.create() pohranjujemo u varijablu const customFetch
-varijablu customFetch eksportujemo kao default
-u main.jsx importujemo funkciju customFetch


Section 10: Register Page

115. React Router Action Intro

116. First Action
-u komponentu Register.jsx importujemo komponentu Form i funkcije redirect, useNavigation iz paketa React Router Dom
-u jsx dodajemo komponentu Form
-komponenti Form dodajemo prop method
-u komponenti App.jsx, u objekt rutu za register dodajemo key value par action i anonimnu funkciju
-u komponenti Register kreiramo i eksportujemo asinhronu funkciju action()
-u komponentu App.jsx importujemo funkciju action ako registerAction
-u objekt rutu za register dodajemo funkciju registerAction 

117. Register User Complete
-u komponenti Register.jsx, u funkciju action dodajemo parametar destruktuirani prop request
-dodajemo metodu await request.formData()
-vrijednost metode request.formData() pohranjujemo u varijablu const formData
-dodajemo metodu Object.fromEntries(formData)
-vrijednost ove metode pohranjujemo u varijablu const data
-kreiramo blokove koda try - catch
-importujemo funkciju customFetch
-u blok koda try dodajemo metodu await customFetch.post()
-dodajemo funkciju return redirect()
-nakon sto ispunimo formu sa podacima kliknemo na submit dugme

118. Navigation State
-u komponenti Register.jsx kreiramo varijablu const navigation
-kreiramo varijablu const isSubmitting
-u jsx-u button elementu dodajemo atribut disabled
-u atribut disabled proslijedujemo vrijednost varijable isSubmitting
-u button element dodajemo ternarni uslov za varijablu isSubmitting

119. React Toastify
-u main.jsx fajl importujemo komponentu ToastContainer i stil za ovu komponentu
-u komponentu Register.jsx importujemo funkciju toast iz paketa React Toastify
-u blok koda try dodajemo funkciju toast.success()
-u blok koda catch dodajemo funkciju toast.error()


Section 11: Dashboard and Login

120. Login User
-u komponentu Login importujemo komponentu Form i funkcije redirect i useNavigation iz pakete React Router Dom
-importujemo funkciju toast
-importujemo funkciju customFetch 
-kreiramo i eksportujemo asinhronu funkciju action 
-funkciji action() dodajemo parametar destruktuirani prop request
-u komponentu App.jsx importujemo funkciju action kao loginAction iz komponente Login.jsx
-u objekt rutu za login dodajemo key value par action i loginAction
-u funkciji action() kreiramo varijable const formData i const data
-kreiramo blokove koda try - catch
-u blok koda try dodajemo metodu metodu await customFetch.post()
-dodajemo funkciju toast.success()
-dodajemo funkciju return redirect()
-u funkciji Login() kreiramo varijable const navigation i const isSubmitting 
-umjesto elementa form dodajemo komponentu Form
-button elementu submit dodajemo atribut disabled
-u atribut disabled proslijedujemo vrijednost varijable isSubmitting
-u button elementu dodajemo ternarni uslov isSubmitting

121. UseActionData Hook (optional)
-u komponenti Login.jsx kreiramo varijablu const errors
-dodajemo uslov if (data.password.length < 3)
-importujemo funkciju useActionData
-u funkciju Login() kreiramo funkciju useActionData()
-vrijednost funkcije useActionData() pohranjujemo u varijablu const errors
-u jsx dodajemo uslov {errors?.msg && <p>...</p>} za prikazivanje error poruke

122. Loaders
-u komponenti DashboardLayout.jsx kreiramo i eksportujemo asinhronu funkciju loader()
-importujemo funkcije redirect i useLoaderData
-u komponentu App.jsx importujemo funkciju loader kao dashboardLoader
-u objekt rutu za dashboard dodajemo key value par loader i funkciju dashboardLoader

123. Get Current User
-u komponentu DashboardLayout.jsx importujemo funkciju customFetch
-u funkciji loader kreiramo blokove koda try - catch
-u blok koda try dodajemo metodu await customFetch.get()
-vrijednost metode customFetch.get() pohranjujemo u varijablu const { data }
-u blok koda catch dodajemo funkciju redirect()
-u funkciji DashboardLayout(), iz funkcije useLoaderData() destruktuiramo varijablu const { user }
-u jsx-u komponenti Outlet dodajemo prop context
-u pro context proslijedujemo objekt i varijablu user 

124. Logout
-u komponentu DashboardLayout.jsx importujemo i kreiramo funkciju useNavigate iz React Router Dom paketa
-vrijednost funkcije useNavigate pohranjujemo varijablu const navigate
-u funkciju logoutUser() dodajemo funkciju navigate()
-dodajemo metodu await customFetch.get()
-importujemo funkciju toast
-u funkciju logoutUser() dodajemo funkciju toast.success()


Section 12: Jobs Pages

125. Add Job Structure
-importujemo komponentu Form, funkcije useNavigation, redirect, useOutletContext iz paketa React Router Dom
-u komponenti AddJob.jsx destruktuiramo varijablu const { user } iz funkcije useOutletContext()
-kreiramo varijable const navigation i const isSubmitting
-importujemo komponentu Wrapper iz wrappers/DashboardFormPage.js fajla
-importujemo komponentu FormRow.jsx
-u jsx-u kreiramo vise komponenti FormRow
-button elementu dodajemo prop disabled
-u prop disabled proslijedujemo vrijednost varijable isSubmitting

126. Select Input
-u komponenti AddJob.jsx kreiramo div element sa klasom form-row za odabir tip posla
-kreiramo select element
-select elemntu dodajemo atribut defaultValue
-u atribut defaultValue proslijedujemo vrijednost varijable JOB_STATUS.PENDING
-u select element dodajemo metodu Object.values(JOB_STATUS).map()
-u folderu components kreiramo komponentu FormRowSelect.jsx
-u komponenti FormRowSelect.jsx, funkciji FormRowSelect() dodajemo parametre destruktuirane prop name, labelText, list, defaultValue
-u select element dodajemo metodu list.map()
-u komponenti AddJob.jsx importujemo komponentu FormRowSelect.jsx
-u jsx-u dodajemo kreiramo dvije komponente FormRowSelect 
-komponentama FormRowSelect dodajemo prop labelText, name, defaultValue i list

127. Create Job Functionality
-u komponenti AddJob.jsx kreiramo i eksportujemo asinhronu funkciju action()
-funkciji action dodajemo parametar destruktuirani prop request
-u komponentu App.jsx importujemo funkciju action kao addJobAction iz komponente AddJob.jsx
-u objekt ruti za komponentu AddJob dodajemo key - value par action i funkciju addJobAction
-u komponenti AddJob.jsx, u funkciji action() kreiramo varijable const formData i const data
-dodajemo blokove koda try - catch
-u blok koda try dodajemo metodu await customFetch.post()
-dodajemo funkciju toast.success()
-dodajemo funkciju return redirect()
-u blok koda catch dodajemo funkciju toast.error()

128. Add Job CSS (optional)

129. All Jobs Structure
-u folderu components kreiramo komponente JobsContainer.jsx i SearchContainer.jsx
-u index.js fajlu eksportujemo kreirane komponente
-u komponentu AllJobs.jsx importujemo funkcije customFetch i toast
-kreiramo i eksportujemo asinhronu funkciju loader()
-funkciji loader dodajemo parametar destruktuirani prop request
-kreiramo blokove koda try - catch
-u blok koda try dodajemo metodu await customFetch.get()
-vrijednost metode await customFetch() pohranjujemo u varijablu const { data }
-u blok koda catch dodajemo funkciju toast.error()
-u komponentu App.jsx importujemo funkciju loader kao allJobsLoader iz komponente AllJobs.jsx
-u objekt rutu za komponentu AllJobs dodajemo key - value par loader i funkciju allJobsLoader
-u komponentu AllJobs.jsx importujemo i kreiramo funkciju useLoaderData() iz pakete React Router Dom
-u funkciji AllJobs() destruktuiramo varijablu const { data } iz funkcije useLoaderData()
-importujemo i kreiramo komponente JobsContainer i SearchContainer

130. All Jobs Context
-importujemo i kreiramo funkciju createContext() iz React paketa
-vrijednost funkcije createContext() pohranjujemo u varijablu const AllJobsContext
-u jsx dodajemo komponentu AllJobsContext.Provider sa otvorenim i zatvorenim tagom
-komponenti AllJobsContext.Provider dodajemo prop value 
-u prop value proslijedujemo objekt i varijablu data
-kreiramo i eksportujemo funkciju useAllJobsContext()
-importujemo funkciju createContext
-u funkciju useAllJobsContext dodajemo funkciju useContext(AllJobsContext)

131. Jobs Container JSX
-u folderu components kreiramo komponentu Job.jsx
-u komponentu JobsContainer.jsx importujemo komponentu Job.jsx
-importujemo i kreiramo funkciju useAllJobsContext()
-vrijednost funkcije useAllJobsContext() pohranjujemo u destruktuiramo u varijablu const { data }
-vrijednost varijable data destruktuiramo u varijablu const { jobs }
-dodajemo uslov if (jobs.length === 0)
-importujemo stiliziranu komponentu Wrapper iz wrappers/JobsContainer.js fajla
-u uslov if dodajemo komponentu Wrapper i h2 element
-u jsx dodajemo komponentu Wrapper i div element sa klasom jobs
-u div element dodajemo metodu jobs.map()
-u metodu map() dodajemo komponentu Job
-komponenti Job dodajemo prop key i objekt prop {...job}

132. Jobs Container CSS (optional)

133. Job Component
-u folderu components kreiramo komponentu JobInfo.jsx
-u komponentu Job.jsx importujemo instancu day iz paketa Dayjs
-importujemo instancu advancedFormat iz paketa dayjs/plugin/advancedFormat
-importujemo stiliziranu komponentu Wrapper iz wrappers/Job.js fajla
-importujemo komponentu JobInfo.jsx
-importujemo React ikonice iz paketa React Icons
-funkciji Job() dodajemo destruktuirane parametre 
-kreiramo varijablu const date
-u jsx-u kreiramo komponentu Wrapper i header elemente
-u header elementu kreiramo div element sa klasom main-icon
-kreiramo div element sa klasom info
-izvan header elementa kreiramo div element sa klasom content
-kreiramo div element sa klasom content-center
-u div elementu kreiramo tri komponent JobInfo
-komponentama JobInfo dodajemo prop icon i text 
-div elementu za status posla dodajemo dinamicku klasu {`status ${jobStatus}`} 
-dinamicka klasa predstavlja pozadinu za svaki od tri statusa posla
-kreiramo footer element sa klasom actions
-importujemo komponente Form i Link iz paketa React Router Dom
-u footer elementu kreiramo komponente Form i Link
-u komponenti Form kreiramo button Delete element 
-u komponenti JobInfo.jsx importujemo stiliziranu komponentu Wrapper iz wrappers/JobInfo.js fajla
-funkciji JobInfo() dodajemo parametre destruktuirane prop icon i text
-u jsx-u kreiramo komponentu Wrapper i span elemente

134. Job Component CSS (optional)

135. Edit Job - Setup
-u komponentu App.jsx importujemo komponentu EditJob.jsx
-kreiramo objekt rutu za komponentu EditJob
-u komponenti Job.jsx komponenti Link dodajemo prop to
-u prop to dodajemo dinamicku rutu za uredivanje posla na osnovu parametra id

136. Route Params
-u komponenti EditJob.jsx kreiramo i eksportujemo funkcije action() i loader()
-u komponentu App.jsx importujemo funkciju loader kao editJobLoader 
-u komponentu App.jsx importujemo funkciju action kao editJobAction
-u komponenti EditJob.jsx importujemo i kreiramo funkciju useParams()
-u funkciji EditJob(), vrijednost funkcije useParams() pohranjujemo u varijablu const params

137. Edit Job Loader
-u komponenti EditJob.jsx, u funkciji loader() kreiramo blokove koda try - catch
-importujemo funkciju customFetch
-u blok koda try dodajemo metodu await customFetch.get()
-vrijednost metode await customFetch.get() pohranjujemo u destruktuiranu varijablu const { data }
-dodajemo return data
-importujemo funkciju toast
-u blok koda catch dodajemo funkciju toast.error()
-importujemo funkciju redirect i useLoaderData
-dodajemo funkciju redirect()
-u funkciji EditJob() kreiramo funkciju useLoaderData()
-vrijednost funkcije useLoaderData() pohranjujemo u destruktuiranu varijablu const { job }

138. Edit Job JSX
-u komponentu EditJob.jsx importujemo komponentu Wrapper iz wrappers/DashboardFormPage.js fajla
-u jsx-u kreiramo komponentu Wrapper sa otvorenim i zatvorenim tagom
-importujemo komponentu Form iz paketa React Router Dom
-importujemo komponente FormRow.jsx i FormRowSelect.jsx
-u jsx-u kreiramo tri komponente FormRow.jsx 
-komponentama FormRow dodajemo prop type, name i defaultValue
-u jsx-u kreiramo dvije komponente FormRowSelect
-komponentama FormRowSelect dodajemo prop name, labelText, defaultValue i list
-u prop list dodajemo funkcije Object.values()
-importujemo varijable JOB_STATUS i JOB_TYPE iz constants.js fajla
-importujemo i kreiramo funkciju useNavigation()
-vrijednost funkcije useNavigation() pohranjujemo u varijablu const navigation
-kreiramo varijablu const isSubmitting
-u jsx-u kreiramo button element sa atributima type, className i disabled
-u atribut disabled proslijedujemo vrijednost varijable isSubmitting
-u button element dodajemo ternarni uslov za varijablu isSubmitting

139. Edit Job Action
-u komponenti EditJob.jsx, funkciji action dodajemo destruktuirane parametre request i params
-kreiramo varijable const formData i const data
-kreiramo blokove koda try i catch
-u bloku koda try dodajemo funkciju await customFetch.patch()
-dodajemo funkcije toast.success() i return redirect()
-u blok koda catch dodajemo funkciju toast.error()

140. Delete Job
-u komponenti Job.jsx, u komponenti Form u kojoj se nalazi button element za brisanje dodajemo prop method i action
-u prop method dodajemo opciju post
-u prop action dodajemo dinamicku rutu u koju proslijedujemo id posla kojeg zelimo obrisati
-u komponenti DeleteJob.jsx kreiramo i eksportujemo asinhronu funkciju action()
-funkciji action() dodajemo parametar destruktuirani prop params
-u komponentu App.jsx importujemo funkciju action kao deleteJobAction iz komponente DeleteJob.jsx
-kreiramo objekt rutu za komponentu DeleteJob
-dodajemo key - value par action i funkciju deleteJobAction
-u komponenti DeleteJob.jsx, u funkciji action() kreiramo blokove koda try - catch
-importujemo funkcije redirect, toast i customFetch
-u blok koda try dodajemo metodu await customFetch.delete()
-dodajemo funkciju toast.success()
-u blok koda catch dodajemo funkciju toast.error()
-nakon blokova koda try - catch dodajemo funkciju return redirect()


Section 13: Admin Page

141. Admin Page Setup
-u komponentu Admin.jsx importujemo funkcije customFetch i toast
-kreiramo i eksportujemo asinhronu funkciju action()
-u funkciji action() kreiramo blokove koda try - catch
-u blok koda try dodajemo metodu await customFetch.get()
-vrijednost metode await customFetch.get() pohranjujemo u destruktuiranu varijablu const { data }
-u blok koda catch dodajemo funkcije toast.error() i return redirect()
-importujemo i kreiramo funkciju useLoaderData()
-vrijednost funkcije useLoaderData() pohranjujemo u destruktuirane varijable const { users, jobs }
-importujemo komponentu Wrapper iz wrappers/StatsContainer.js fajla
-u komponentu App.jsx importujemo funkciju loader kao adminLoader
-u objekt rutu za komponentu Admin dodajemo key - value par loader i funkciju adminLoader
-u komponenti NavLinks.jsx destruktuiramo varijablu const { role }
-dodajemo uslov if (role !== 'admin' && path === 'admin')

142. Admin Page Complete
-u folderu components kreiramo komponentu StatItem.jsx
-u komponentu StatItem.jsx importujemo stiliziranu komponentu Wrapper iz wrappers/StatItem.js fajla
-funkciji StatItem() dodajemo parametre destruktuirane prop count, title, icon, color i bcg
-u jsx-u komponenti Wrapper dodajemo prop color i bcg
-u index.js fajlu eksportujemo komponentu StatItem kao default
-u komponentu Admin.jsx importujemo komponentu StatItem.jsx
-u jsx-u, u komponenti Wrapper kreiramo dvije komponente StatItem
-komponentama StatItem dodajemo prop title, count, color, bcg i icon

143. Admin CSS (optional)


Section 14: Profile Page

144. Avatar Images
-otvorimo web stranicu https://generated.photos/faces/male

145. Public Folder
-u root nivou foldera kreiramo folder public
-u folderu public kreiramo folder uploads
-u server.js fajl importujemo instancu path i varijablu dirname iz paketa path
-importujemo instancu express-async-errors
-importujemo funkciju fileURLToPath iz url paketa
-kreiramo varijablu const __dirname
-kreiramo metodu app.use() za folder public
-u folderu public dodajemo dvije slike kerim.png i john.png
-u pretrazivacu otvorimo rutu http://localhost:5100/kerim.png 
-otvorimo rutu http://localhost:5100/john.png

146. User Schema Update
-u UserModel.js fajl dodajemo opcije avatar i avatarPublicId kao String

147. Profile Page Structure
-u komponentu Profile.jsx importujemo i kreiramo funkciju useOutletContext iz paketa React Router Dom
-vrijednost funkcije useOutletContext() pohranjujemo u destruktuiranu  varijablu const { user }
-iz varijable user destruktuiramo varijable const { name, lastName, email, location } 
-importujemo i kreiramo funkciju useNavigation()
-vrijednost funkcije useNavigation() pohranjujemo u varijablu const navigation
-kreiramo varijablu const isSubmitting
-importujemo komponentu Form
-importujemo stiliziranu komponentu Wrapper iz wrappers/DashboardFormPage.js fajla
-u jsx-u kreiramo komponentu Wrapper
-u komponenti Wrapper kreiramo komponentu Form
-komponenti Form dodajemo prop method, className i encType
-kreiramo h4 element sa klasom form-title
-kreiramo div element sa klasom form-center
-importujemo komponentu FormRow.jsx
-u div elementu sa klasom form-center kreiramo cetiri FormRow komponente
-komponentama FormRow dodajemo prop type, name, labelText i defaultValue
-kreiramo div element sa klasom form-row
-u div elementu sa klasom form-row kreiramo label element sa atributima htmlFor i className
-kreiramo input element za sliku sa atributima type, id, name, className i accept
-kreiramo button element sa atributima className, type i disabled
-u atribut disabled proslijedujemo vrijednost varijable isSubmitting
-u button element dodajemo ternarni uslov za varijablu isSubmitting

148. Profile Action
-u komponentu Profile.jsx importujemo funkciju customFetch
-kreiramo i eksportujemo asinhronu funkciju action()
-funkciji action() dodajemo parametar destruktuirani prop request
-u komponentu App.jsx importujemo funkciju action kao profileAction
-u objekt rutu za komponentu Profile dodajemo key - value par action i funkciju profileAction
-u komponenti Profile.jsx, u funkciji action() kreiramo varijablu const formData
-kreiramo varijablu const file
-dodajemo uslov if (file && file.size > 500000) 
-importujemo funkciju toast
-u uslov if dodajemo funkciju toast.error()
-u blok koda try dodajemo metodu await customFetch.patch()
-dodajemo funkciju toast.success()
-u blok koda catch dodajemo funkciju toast.error()

149. Setup Multer
-u folderu middleware kreiramo multerMiddleware.js fajl
-u multerMiddleware.js fajl importujemo multer instancu
-kreiramo metodu multer.diskStorage()
-vrijednost metode multer.diskStorage() pohranjujemo u varijablu const storage
-u funkciju diskStorage() dodajemo dva konfiguraciona objekta destination i filename
-kreiramo varijablu const upload
-varijablu upload eksportujemo kao default
-u userRouter.js fajl importujemo funkciju upload
-u rutu router.patch() dodajemo funkciju upload.single('avatar')

150. Cloudinary
-otvorimo web stranicu https://cloudinary.com/
-u fajlovima .env i .env.example kreiramo varijable CLOUD_NAME, CLOUD_API_KEY i CLOUD_API_SECRET
-u server.js fajlu importujemo instancu cloudinary
-kreiramo metodu cloudinary.config()
-u funkciju config() dodajemo konfiguracioni objekt sa vrijednostima cloud_name, api_key i api_secret

151. Update User Functionality
-u userController.js fajl importujemo instancu cloudinary
-importujemo funkciju promises kao fs
-u funkciju updateUser() dodajemo uslov if (req.file)
-u uslov if dodajemo metodu await cloudinary.v2.uploader.upload()
-vrijednost metode await cloudinary pohranjujemo u varijablu const response
-dodajemo metodu await fs.unlink()
-dodajemo metode newUser.avatar i newUser.avatarPublicId
-varijablu const obj preimenujemo u const newUser
-kreiramo varijablu const updatedUser
-dodajemo uslov if (req.file && updatedUser.avatarPublicId)
-u uslov if dodajemo metodu cloudinary.v2.uploader.destroy()

152. Submit Button Component
-u folderu components kreiramo komponentu SubmitBtn.jsx
-u komponentu SubmitBtn.jsx importujemo i kreiramo funkciju useNavigation
-vrijednost funkcije useNavigation pohranjujemo u varijablu const navigation
-funkciji SubmitBtn() dodajemo parametar destruktuirani prop formBtn
-u jsx-u kreiramo button element sa atributima type, className i disabled
-u atribut className dodajemo dinamicku klasu
-u index.js fajlu eksportujemo komponentu SubmitBtn.jsx
-u komponentu AddJob.jsx importujemo komponentu SubmitBtn.jsx
-u jsx-u kreiramo komponentu SubmitBtn 
-komponenti SubmitBtn dodajemo prop formBtn
-u komponentu EditJob.jsx importujemo komponentu SubmitBtn
-u jsx-u kreiramo komponentu SubmitBtn
-komponenti SubmitBtn dodajemo prop formBtn
-u komponentu Profile.jsx importujemo komponentu SubmitBtn.jsx
-u jsx-u kreiramo komponentu SubmitBtn
-komponenti SubmitBtn dodajemo prop formBtn
-u komponentu Login.jsx importujemo komponentu SubmitBtn.jsx
-u jsx-u kreiramo komponentu SubmitBtn
-u komponentu Register.jsx importujemo komponentu SubmitBtn.jsx
-u jsx-u kreiramo komponentu SubmitBtn

153. Create Test User
-u komponentu Login.jsx importujemo i kreiramo funkciju useNavigate iz React Router Dom paketa
-vrijednost funkcije useNavigate() pohranjujemo u varijablu const navigate
-kreiramo asinhronu funkciju loginDemoUser
-u funkciji loginDemoUser() kreiramo objekt const data
-kreiramo blokove koda try - catch
-u blok koda try dodajemo metodu await customFetch.post()
-dodajemo funkcije toast.success() i navigate()
-u blok koda catch dodajemo funkciju toast.error()
-button elementu explore the app dodajemo dogadaj onClick
-u dogadaj onClick proslijedujemo funkciju loginDemoUser

154. Restrict Access to Test User
-u authMiddleware.js fajlu, u funkciji authenticateUser() kreiramo varijablu const testUser
-u metodu req.user dodajemo varijablu testUser
-kreiramo i eksportujemo funkciju checkForTestUser() sa parametrima req, res i next
-dodajemo uslov if (req.user.testUser)
-importujemo funkciju BadRequestError
-u uslov if (req.user.testUser) dodajemo funkciju throw new BadRequestError()
-dodajemo funkciju next()
-u jobRouter.js fajl importujemo funkciju checkForTestUser
-u metode za router dodajemo funkciju checkForTestUser
-u userRouter.js fajl importujemo funkciju checkForTestUser
-u metodu router.patch() dodajemo funkciju checkForTestUser

155. Mockaroo
-otvorimo web stranicu https://www.mockaroo.com/
-u folderu utils kreiramo mockData.json fajl

156. Populate DB
-kreiramo populate.js fajl
-u populate.js fajl importujemo funkciju readFile 
-importujemo instance mongoose i dotenv
-dodajemo metodu dotenv.config()
-importujemo modelete Job i User
-kreiramo blokove koda try i catch
-u blok koda try dodajemo metodu await mongoose.connect()
-kreiramo varijable const user, const jsonJobs i const jobs
-dodajemo metode await Job.deleteMany() i await Job.create(jobs)
-u terminalu ukucamo komandu node populate za korisnike test i kerim
-sa ovom komandom dodajemo po 100 kreiranih poslova za svakog korisnika


Section 15: Stats Page

157. Stats Route Setup
-u jobController.js fajlu kreiramo i eksportujemo asinhronu funkciju showStats()
-u jobRouter.js fajl importujemo funkciju showStats
-kreiramo rutu router.route() za funkciju showStats
-u Postman-u kreiramo i testiramo rutu Show Stats
-u jobController.js fajlu, u funkciji showStats() kreiramo varijablu objekt const defaultStats
-kreiramo varijablu let monthlyApplications
-dodajemo metodu res.status(StatusCodes.OK)

158. Group by Job Status
-u jobController.js fajl importujemo instancu mongoose
-u funkciju showStats() dodajemo metodu Job.aggregate()
-vrijednost metode Job.aggregate() pohranjujemo u varijablu let stats
-u funkciju aggregate() dodajemo niz []
-u niz [] dodajemo objekte $match i $group
-dodajemo metodu stats.reduce() sa dva parametra acc i curr
-destruktuiramo varijable const { _id: title, count } iz varijable curr
-u objektu defaultStats dodajemo za vrijednosti pending, interview i declined vrijednost 0 ako nema rezultata za poslove
-u Postman-u testiramo rutu Show Stats 

159. Group by Monthly Applications
-importujemo instancu day iz paketa Dayjs
-u jobController.js fajl, u funkciju showStats() dodajemo metodu Job.aggregate([ ... ])
-vrijednost metode Job.aggregate() pohranjujemo u varijablu let monthlyApplications
-u niz dodajemo metodu { $match: { createdBy: ... } }
-dodajemo jos jedan objekt { $group: { ... }}
-dodajemo metodu  monthlyApplications.map()
-u metodi map() destruktuiramo varijable const { _id: { year, month }, count } iz varijable item
-kreiramo varijablu const date
-nizu monthlyApplications nakon metode map() dodajemo metodu reverse()
-u Postman-u testiramo rutu Show Stats 

160. Stats Page Setup
-u folderu components kreiramo komponente AreaChart.jsx, BarChart.jsx, ChartsContainer.jsx i StatsContainer.jsx
-u index.js fajlu eksportujemo komponente ChartsContainer.jsx i StatsContainer.jsx kao default
-u komponenti Stats.jsx kreiramo i eksportujemo asinhronu funkciju loader()
-importujemo funkciju customFetch
-u komponentu App.jsx importujemo funkciju loader kao statsLoader
-u objekt rutu za komponentu Stats dodajemo key - value par loader i funkciju statsLoader
-u komponenti Stats.jsx, u funkciji loader() dodajemo metodu await customFetch.get()
-vrijednost metode await customFetch.get() pohranjujemo u destruktuiranu varijablu const { data }
-dodajemo return data
-u blok koda catch dodajemo return error
-importujemo i kreiramo funkciju useLoaderData()
-vrijednost funkcije useLoaderData() pohranjujemo u destruktuirane varijable const { defaultStats, monthlyApplications }
-importujemo komponente StatsContainer.jsx i ChartsContainer.jsx
-u jsx-u komponenti StatsContainer dodajemo prop defaultStats
-u prop defaultStats proslijedujemo vrijednost varijable defaultStats
-dodajemo uslov {monthlyApplications?.length > 1 && ()} za prikazivanje komponente ChartsContainer
-komponenti ChartsContainer dodajemo prop data
-u prop data proslijedujemo vrijednost varijable monthlyApplications

161. Stats Container
-u komponentu StatsContainer.jsx importujemo stiliziranu komponentu Wrapper iz wrappers/StatsContainer.js fajla
-importujemo komponentu StatItem.jsx
-importujemo React ikonice
-funkciji StatsContainer() dodajemo parametar destruktuirani prop defaultStats
-kreiramo varijablu niz const stats
-u jsx-u kreiramo komponentu Wrapper
-u komponentu Wrapper dodajemo metodu stats.map()
-u metodu map() dodajemo komponentu StatItem
-komponenti StatItem dodajemo prop key i {...item}

162. BarChart Container
-u komponentu ChartsContainer.jsx importujemo stiliziranu komponentu Wrapper iz wrappers/ChartsContainer.js fajla
-importujemo React Hook useState
-importujemo komponente AreaChart i BarChart
-kreiramo state varijablu const barChart i set funkciju setBarChart
-funkciji ChartsContainer() dodajemo parametar destruktuirani prop data
-u jsx-u kreiramo komponentu Wrapper
-u komponenti Wrapper kreiramo elemente h4 i button 
-button elementu dodajemo atribut type i dogadaj onClick
-u dogadaj onClick proslijedujemo funkciju setBarChart(!barChart)
-u button element dodajemo ternarni uslov za varijablu barChart
-dodajemo uslov ternarni uslov za varijablu barChart
-komponentama AreaChart i BarChart dodajemo prop data

163. Charts
-otvorimo web stranicu https://recharts.org/en-US/
-u komponentu AreaChart.jsx importujemo komponente iz paketa Recharts
-funkciji AreaChart() dodajemo parametar destruktuirani prop data
-u jsx-u kreiramo komponetu ResponsiveContainer kao roditelj element za ostale komponente iz paketa Recharts
-komponenti ResponsiveContainer dodajemo prop width i height
-u komponenti ResponsiveContainer kreiramo komponentu AreaChart
-komponenti AreaChart dodajemo prop data i margin
-u komponenti AreaChart kreiramo komponente CartesianGrid, XAxis,YAxis, Tooltip i Area
-komponenti CartesianGrid dodajemo prop strokeDasharray
-komponenti XAxis dodajemo prop dataKey
-komponenti YAxis dodajemo prop allowDecimals
-komponenti Area dodajemo prop type, dataKey, stroke i fill
-preimenujemo ime funkcije AreaChart() u AreaChartComponent()
-u komponentu BarChart.jsx importujemo komponente iz paketa Recharts
-u komponenti BarChart.jsx preimenujemo funkciju BarChart() u BarChartComponent
-funkciji BarChartComponent() dodajemo parametar destruktuirani prop data
-u jsx-u kreiramo komponentu ResponsiveContainer kao roditelj element za ostale komponente iz paketa Recharts
-komponenti ResponsiveContainer dodajemo prop width i height
-u komponenti ResponsiveContainer kreiramo komponentu BarChart
-komponenti BarChart dodajemo prop data i margin
-u komponenti BarChart kreiramo komponente CartesianGrid, XAxis, YAxis, Tooltip i Bar
-komponenti CartesianGrid dodajemo prop strokeDasharray
-komponenti XAxis dodajemo prop dataKey
-komponenti YAxis dodajemo prop allowDecimals
-komponenti Bar dodajemo dataKey, fill i barSize

164. Charts Container CSS (optional)


Section 16: All Jobs Page

165. Query Params
-u jobController.js fajlu, u metodu Job.find() dodana opcija position
-u Postman-u testiramo rutu Get All Jobs npr parametrom Senior Developer, npr. {{URL}}/jobs?search=Senior Developer

166. Search Param
-u jobController.js fajlu, u funkciji getAllJobs() destruktuiramo varijablu const { search } iz metode req.query
-kreiramo varijablu objekt const queryObject
-u metodu Job.find() dodajemo varijablu queryObject
-dodajemo uslov if (search)
-u Postman-u testiramo rutu Get All Jobs. npr. {{URL}}/jobs?search
-u uslov if (search) dodajemo metodu queryObject.$or 
-u konfiguracioni niz dodajemo opciju za poziciju i kompaniju
-u Postman-u testiramo rutu Get All Jobs, npr. {{URL}}/jobs?search=Senior

167.Job Status and Job Type
-u jobController.js fajlu destruktuiramo varijable const { jobStatus, jobType } iz metode req.query
-dodajemo uslov if (jobStatus && jobStatus !== 'all')
-dodajemo uslov if (jobType && jobType !== 'all')
-u Postman-u testiramo rutu Get All Jobs, npr. {{URL}}/jobs?search&jobStatus=pending

168. Sort
-u jobController.js fajlu kreiramo objekt varijablu const sortOptions
-kreiramo varijablu const sortKey
-metodi await Job.find(queryObject) dodajemo metodu sort(sortKey)
-destruktuiramo varijablu const { sort } iz metode req.query
-u Postman-u testiramo rutu Get All Jobs, npr. {{URL}}/jobs?search&jobStatus=declined&jobType=full-time&sort=oldest

169. Pagination
-metodi await Job.find(queryObject).sort(sortKey) dodajemo funkciju limit()
-dodajemo metodu skip(1)
-kreiramo varijable const page, const limit i const skip za paginaciju rezultata poslova
-u funkciju skip() proslijedujemo varijablu skip
-u funkciju limit() proslijedujemo varijablu limit
-kreiramo varijablu const numOfPages
-u metodu res.status(StatusCodes.OK).json() dodajemo varijable numOfPages i currentPage
-u Postman-u testiramo rutu Get AllJobs, npr. {{URL}}/jobs?search=e&jobStatus=declined&jobType=full-time&sort=z-a&page=2

170. Search Form Setup
-u komponentu SearchContainer.jsx importujemo stiliziranu komponentu Wrapper iz wrappers/DashboardFormPage.js fajla
-u jsx-u kreiramo komponentu Wrapper
-importujemo komponentu Form iz React Router Dom paketa
-u jsx-u kreiramo komponentu Form
-komponenti Form dodajemo prop className
-kreiramo h5 element sa klasom form-title
-kreiramo div element sa klasom form-center
-importujemo komponente FormRow.jsx i FormRowSelect.jsx
-u jsx-u kreiramo jednu FormRow i tri FormRowSelect komponente
-komponenti FormRow dodajemo prop type, name i defaultValue
-importujemo varijable JOB_TYPE, JOB_STATUS, JOB_SORT_BY iz constants.js fajla
-komponentama FormRowSelect dodajemo prop labelText, name, list i defaultValue osim zadnje komponente u koju ne dodajemo labelText
-importujemo komponentu Link iz paketa React Router Dom
-u jsx-u kreiramo komponentu Link
-komponenti Link dodajemo prop to i className
-importujemo komponentu SubmitBtn.jsx
-u jsx-u kreiramo komponentu SubmitBtn
-komponenti SubmitBtn dodajemo prop formBtn
-u pretrazivacu otvorimo rutu http://localhost:5173/dashboard/all-jobs i kliknemo dugme Submit

171. Loader and Query Params
-u komponenti AllJobs.jsx, funkciji loader dodajemo parametar destruktuirani prop request
-dodajemo metodu Object.fromEntries([ ... ])
-vrijednost metode Object.fromEntries() pohranjujemo u varijablu const params
-u metodu await customFetch.get('/jobs') za dohvacanje poslova dodajemo objekt params
-otvorimo rutu http://localhost:5173/dashboard/all-jobs u pretrazivacu
-kad otvorimo rutu kliknemo dugme Submit

172. Controlled Inputs
-u komponentu SearchContainer.jsx importujemo i kreiramo funkciju useSubmit() iz paketa React Router Dom
-vrijednost funkcije useSubmit() pohranjujemo u varijablu const submit
-komponenti FormRow dodajemo dogadaj onChange
-u dogadaj onChange proslijedujemo vrijednost funkcije submit(e.currentTarget.form)
-u komponenti FormRow.jsx, funkciji FormRow() dodajemo parametar destruktuirani prop onChange
-u jsx-u input elementu dodajemo dogadaj onChange
-u dogadaj onChange proslijedujemo vrijednost prop onChange
-u komponenti FormRowSelect.jsx, funkciji FormRowSelect() dodajemo parametar destruktuirani prop onChange
-u jsx-u select elementu dodajemo dogadaj onChange
-u dogadaj onChange proslijedujemo vrijednost prop onChange
-u komponenti SearchContainer.jsx komponentama FormRowSelect dodajemo dogadaj onChange
-u prop onChange proslijedujemo anonimne funkcije sa parametrom e
-u anonimne funkcije proslijedujemo funkcije submit(e.currentTarget.form)
-u komponentu AllJobs.jsx, u return za objekt data dodajemo varijablu searchValues
-u jsx-u destruktuiramo varijablu searchValues iz funkcije useLoaderData()
-u prop value dodajemo varijablu searchValues
-u komponentu SearchContainer.jsx importujemo i kreiramo funkciju useAllJobsContext
-destruktuiramo varijablu const { searchValues } iz funkcije useAllJobsContext()
-iz varijable searchValues destruktuiramo varijable const { search, jobStatus, jobType, sort }
-u Postman-u testiramo rutu Get All Jobs, npr. {{URL}}/jobs?search=e&jobStatus=declined&jobType=full-time&sort=z-a&page=1

173. Debounce
-u komponenti SearchContainer.jsx kreiramo funkciju debounce() sa parametrom onChange
-u funkciji debounce() kreiramo varijablu let timeout
-u funkciji debounce() kreiramo anonimnu funkciju sa parametrom e
-u anonimnoj funkciji kreiramo varijablu const form
-dodajemo funkciju onChange(form)
-kreiramo funkciju setTimeout()
-vrijednost funkcije setTimeout() pohranjujemo u varijablu const timeout
-u funkciju setTimeout() dodajemo funkciju onChange(form)
-u komponentu FormRow za pretragu poslova, u dogadaj onChange proslijedujemo funkciju debounce sa parametrom form
-u funkciju debounce(form) proslijedujemo funkciju submit(form)

174. Pagination Setup
-u folderu components kreiramo komponentu PageBtnContainer.jsx
-u komponenti JobsContainer.jsx, destruktuiramo varijable const { totalJobs, numOfPages } iz varijable data
-kreiramo h5 element
-u h5 element dodajemo varijablu totalJobs
-importujemo komponentu PageBtnContainer.jsx
-kreiramo uslov numOfPages za prikazivanje komponente PageBtnContainer
-u komponentu PageBtnContainer.jsx importujemo i kreiramo funkciju useAllJobsContext()
-destruktuiramo varijable const { data: { numOfPages, currentPage } } iz funkcije useAllJobsContext()

175. Render Buttons
-u komponentu PageBtnContainer.jsx importujemo stiliziranu komponentu Wrapper iz wrappers/PageBtnContainer.js fajla
-importujemo React ikonice
-u jsx-u kreiramo komponentu Wrapper
-u komponenti Wrapper kreiramo button element sa klasama btn i prev-btn
-kreiramo div element sa klasom btn-container
-kreiramo butto element sa klasoma btn i next-btn
-dodajemo metodu Array.from()
-vrijednost metode Array.from() pohranjujemo u varijablu const pages
-u div element sa klasom btn-container dodajemo metodu pages.map()
-u metodi map() kreiramo button element sa atributima className i key
-u className proslijedujemo dinamicku klasu u zavisnosti na kojoj smo trenutno stranici
-u button element dodajemo varijablu pageNumber

176. Pagination Logic - First Approach
-u komponenti PageBtnContainer.jsx kreiramo funkciju handlePageChange() sa parametrom pageNumber
-u div elementu sa klasom btn-container, button elementu dodajemo dogadaj onClick
-u dogadaj onClick proslijedujemo anonimnu funkciju
-u anonimnu funkciju proslijedujemo funkciju handlePageChange(pageNumber)
-u button element prev dodajemo dogadaj onClick
-u dogadaj onClick proslijedujemo anonimnu funkciju
-u anonimnoj funkciji kreiramo varijablu let prevPage
-dodajemo uslov if (prevPage < 1)
-dodajemo funkciju handlePageChange(prevPage)
-u button element prev dodajemo dogadaj onClick
-u dogadaj onClick proslijedujemo anonimnu funkciju
-u anonimnoj funkciji kreiramo varijablu let nextPage
-dodajemo uslov if (nextPage > numOfPages)
-dodajemo funkciju handlePageChange(nextPage)
-importujemo funkcije useNavigate i useLocation iz paketa React Router Dom
-destruktuiramo varijable const { search, pathname } iz funkcije useLocation()
-vrijednost funkcije useNavigate() pohranjujemo u varijablu const navigate
-u funkciji handlePageChange() kreiramo metodu new URLSearchParams(search)
-vrijednost metode new URLSearchParams(search) pohranjujemo u varijablu const searchParams
-varijabli searchParams dodajemo metodu set()
-dodajemo funkciju navigate()

177. Pagination Logic - Complex Approach
-u komponenti PageBtnContainer.jsx kreiramo funkciju addPageButton()
-funkciji addPageButton() dodajemo parametre { pageNumber, activeClass }
-u funkciji addPageButton() kreiramo button element
-button elementu dodajemo atribute key, className i dogadaj onClick
-u className dodajemo dinamicku klasu activeClass && 'active'
-kreiramo funkciju renderPageButtons()
-u funkciji renderPageButtons() kreiramo varijablu niz const pageButtons
-u div element btn-container dodajemo funkciju renderPageButtons()
-dodajemo metode pageButtons.push() i uslove if () za pojavljivanje i sakrivanje brojeva prilikom listanja poslova

178. Button Container CSS (Optional)


Section 17: Initial Deploy

179. Local Build
-u komponenti Register.jsx, u jsx-u komponentama izbrisemo prop defaultValue
-u komponenti Login.jsx, u jsx-u komponentama izbrisemo prop defaultValue
-u terminalu navigiramo u folder cliend sa komandom cd cliend
-ukucamo komandu npm run build
-nakon sto se kreira folder dist u folderu client, prebacimo sve fajlove u folder public
-u server.js fajlu kreiramo metodu app.get('*')
-u metodu app.get() dodajemo metodu res.sendFile()
-u terminalu ukucamo komandu node server

180. Render Intro

181. Deploy App
-otvorimo web stranicu https://render.com/
-kreiramo novi servis za nas MERN Jobify App projekt
-na web stranici Render, u nas projekt dodamo varijable iz .env fajla


Section 18: React Query and Other Extra Features

182. Build Front-End Programmatically
-u package.json fajl dodajemo komandu setup-production-app
-u server.js fajlu, u metodu app.get() i app.use() dodajemo u funkciju resolve() folder client/dist
-obrisemo folder node_modules za backend
-u folderu client obrisemo folder node_modules
-u terminalu ukucamo komandu npm run setup-production-app
-u terminalu ukucamo komandu node server da pokrenemo projekt lokalno
-na stranici Render odaberemo opciju postavke
-u opciju Build Command dodajemo komandu npm run setup-production-app

183. Update User - Fix
-otvorimo link https://www.npmjs.com/package/datauri
-u multerMiddleware.js fajl dodajemo opciju multer.memoryStorage()
-importujemo instancu DataParser iz paketa datauri/parser.js
-importujemo instancu path
-kreiramo i eksportujemo funkciju formatImage()
-u userController.js fajl importujemo funkciju formatImage
-u funkciji updatedUser() izbrisemo metodu await fs.unlink()
-u multerMiddleware.js fajlu kreiramo varijablu const parser
-u funkciji formatImage() kreiramo varijablu const fileExtension
-dodajemo metodu return parser.format()
-u userController.js fajlu, u funkciji updatedUser() dodajemo metodu v2.uploader.upload(file)

184. Global Loading
-u folderu components kreiramo komponentu Loading.jsx
-u komponenti Loading.jsx kreiramo div element sa klasom loading
-u index.js fajlu eksportujemo komponentu Loading.jsx
-u DashboardLayout.jsx komponentu importujemo i kreiramo funkciju useNavigation()
-vrijednost funkcije useNavigation() pohranjujemo u varijablu const navigation
-kreiramo varijablu const isPageLoading
-importujemo komponentu Loading.jsx
-u jsx-u dodajemo ternarni uslov za varijablu isPageLoading

185. React Query - Install
-otvorimo web stranicu https://tanstack.com/
-u terminalu navigiramo u folder client sa komandom cd client i instaliramo Tanstack pakete
-u komponentu App.jsx importujemo funkciju QueryClient, komponente QueryClientProvider i ReactQueryDevtools iz paketa Tanstack
-dodajemo metodu new QueryClient()
-vrijednost metode new QueryClient() pohranjujemo u varijablu const queryClient
-u jsx-u, kreiramo komponente QueryClientProvider i ReactQueryDevtools
-komponenti QueryClientProvider dodajemo prop client 
-u prop client proslijedujemo vrijednost varijable queryClient
-komponenti ReactQueryDevtools dodajemo prop initialIsOpen

186. Page ErrorElement
-u folderu components kreiramo komponentu ErrorElement.jsx
-u komponentu ErrorElement.jsx importujemo i kreiramo funkciju useRouteError()
-vrijednost funkcije useRouteError() pohranjujemo u varijablu const error
-u jsx-u kreiramo h4 element
-u komponentu App.jsx importujemo komponentu ErrorElement.jsx
-u objekt ruti za komponentu Stats dodajemo key - value par errorElement i komponentu ErrorElement
-u jsx dodajemo return

187. First Query with React Query
-u main.jsx fajlu uklonimo komponentu StrictMode
-u komponentu Stats.importujemo i kreiramo funkciju useQuery()
-u funkciji useQuery() kreiramo objekt sa vrijednostima queryKey i queryFn
-vrijednost funkcije useQuery() pohranjujemo u varijablu const response
-vrijednost funkcije useQuery() pohranjujemo u destruktuirane varijable const { isLoading, isError, data }
-dodajemo uslove if (isLoading) i if (isError)
-destruktuiramo varijable const { defaultStats, monthlyApplications } iz varijable data.data

188. React Query in Stats Loader
-u komponenti Stats.jsx kreiramo varijablu objekt const statsQuery
-u funkciju useQuery() dodajemo varijablu statsQuery
-u komponenti App.jsx u funkciju statsLoader() dodajemo varijablu queryClient
-u komponenti Stats, funkciju loader() dodajemo metodu await queryClient.ensureQueryData(statsQuery)
-u funkciju loader() dodajemo jos jednu funkciju sa parametrom queryClient
-vrijednost ove metode pohranjujemo u varijablu const data
-dodajemo return data